use codespan::{ByteIndex, FileId, Span};
use codespan_reporting::diagnostic::Diagnostic;
use std::sync::Arc;

use crate::surface::{Alias, Extern, Item, Module, StructType, Term, TypeField};
use crate::lexer::Token;
use crate::literal;

grammar(file_id: FileId, report: &mut dyn FnMut(Diagnostic));

extern {
    type Location = ByteIndex;
    type Error = Diagnostic;

    enum Token {
        "doc comment" => Token::DocComment(<String>),
        "inner doc comment" => Token::InnerDocComment(<String>),
        "identifier" => Token::Identifier(<String>),
        "numeric literal" => Token::NumberLiteral(<literal::Number>),
        "string literal" => Token::StringLiteral(<literal::String>),
        "character literal" => Token::CharLiteral(<literal::Char>),

        "bool_elim" => Token::BoolElim,
        "extern" => Token::Extern,
        "else" => Token::Else,
        "f32" => Token::F32,
        "f64" => Token::F64,
        "if" => Token::If,
        "int" => Token::Int,
        "item" => Token::Item,
        "struct" => Token::Struct,

        "{" => Token::OpenBrace,
        "}" => Token::CloseBrace,
        "(" => Token::OpenParen,
        ")" => Token::CloseParen,

        "!" => Token::Bang,
        ":" => Token::Colon,
        "," => Token::Comma,
        "=" => Token::Equals,
        ";" => Token::Semi,
    }
}

pub Module: Module = {
    <doc: "inner doc comment"*>
    <items: Item*> => {
        let doc = Arc::from(doc);

        Module { file_id, doc, items }
    },
};

Item: Item = {
    <doc: "doc comment"*>
    <start: @L> "extern" <name: Identifier> ":" <ty: Term> ";" <end: @R> => {
        let span = Span::new(start, end);
        let doc = Arc::from(doc);

        Item::Extern(Extern { span, doc, name, ty })
    },
    <doc: "doc comment"*>
    <start: @L> <name: Identifier> <ty: (":" <Term>)?> "=" <term: Term> ";" <end: @R> => {
        let span = Span::new(start, end);
        let doc = Arc::from(doc);

        Item::Alias(Alias { span, doc, name, ty, term })
    },
    <doc: "doc comment"*>
    <start: @L> "struct" <name: Identifier> "{"
        <mut fields: (<Field> ",")*>
        <last: Field?>
    "}" <end: @R> => {
        let span = Span::from(start..end);
        let doc = Arc::from(doc);
        fields.extend(last);

        Item::Struct(StructType { span, doc, name, fields })
    },
};

Field: TypeField = {
    <docs: "doc comment"*>
    <name: Identifier> ":" <term: Term> => {
        TypeField { doc: Arc::from(docs), name, term }
    },
};

Term: Term = {
    TermAtomic,
    <term: TermAtomic> ":" <ty: Term> => Term::Ann(Box::new(term), Box::new(ty)),
    <start: @L> "if" <term: Term> "{" <if_true: Term> "}" "else" "{" <if_false: Term> "}" <end: @R> => {
        Term::If(Span::new(start, end), Box::new(term), Box::new(if_true), Box::new(if_false))
    },
};

TermAtomic: Term = {
    <start: @L> "(" <term: Term> ")" <end: @R> => {
        Term::Paren(Span::new(start, end), Box::new(term))
    },
    <name: Identifier> => Term::Var(name.0, name.1),
    <start: @L> <literal: "numeric literal"> <end: @R> => {
        Term::NumberLiteral(Span::new(start, end), literal)
    },
};

Identifier: (Span, String) = {
    <start: @L> <name: "identifier"> <end: @R> => {
        (Span::new(start, end), name)
    },
};
