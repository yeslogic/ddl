use scoped_arena::Scope;
use std::cell::RefCell;

use crate::{StringId, StringInterner};
use crate::source::ByteRange;
use crate::surface::{Term, ParseMessage, Pattern};
use crate::surface::lexer::{Error as LexerError, Token};

grammar<'arena, 'source>(
    interner: &RefCell<StringInterner>,
    scope: &'arena Scope<'arena>,
    messages: &mut Vec<ParseMessage>,
);

extern {
    type Location = usize;
    type Error = LexerError;

    enum Token<'source> {
        "name" => Token::Name(<&'source str>),
        "hole" => Token::Hole(<&'source str>),
        "string literal" => Token::StringLiteral(<&'source str>),
        "number literal" => Token::NumberLiteral(<&'source str>),

        "fun" => Token::KeywordFun,
        "let" => Token::KeywordLet,
        "match" => Token::KeywordMatch,
        "overlap" => Token::KeywordOverlap,
        "Type" => Token::KeywordType,
        "true" => Token::KeywordTrue,
        "false" => Token::KeywordFalse,

        ":" => Token::Colon,
        "," => Token::Comma,
        "=" => Token::Equals,
        "=>" => Token::EqualsGreater,
        "." => Token::FullStop,
        "->" => Token::HyphenGreater,
        "<-" => Token::LessHyphen,
        ";" => Token::Semicolon,
        "_" => Token::Underscore,

        "{" => Token::OpenBrace,
        "}" => Token::CloseBrace,
        "[" => Token::OpenBracket,
        "]" => Token::CloseBracket,
        "(" => Token::OpenParen,
        ")" => Token::CloseParen,
    }
}

Pattern: Pattern<ByteRange> = {
    <start: @L> <name: Name> <end: @R> => Pattern::Name(ByteRange::new(start, end), name),
    <start: @L> "_" <end: @R> => Pattern::Placeholder(ByteRange::new(start, end)),
    <start: @L> <string: StringLiteral> <end: @R> => Pattern::StringLiteral(ByteRange::new(start, end), string),
    <start: @L> <number: NumberLiteral> <end: @R> => Pattern::NumberLiteral(ByteRange::new(start, end), number),
    <start: @L> "true" <end: @R> => Pattern::BooleanLiteral(ByteRange::new(start, end), true),
    <start: @L> "false" <end: @R> => Pattern::BooleanLiteral(ByteRange::new(start, end), false),
};

AnnPattern: (Pattern<ByteRange>, Option<&'arena Term<'arena, ByteRange>>) = {
    <pattern: Pattern> => (pattern, None),
    "(" <pattern: Pattern> ":" <type_: LetTerm> ")" => (pattern, Some(scope.to_scope(type_))),
};

pub Term: Term<'arena, ByteRange> = {
    LetTerm,
    // FIXME: LALRPOP does not accept raw identifiers (see: https://github.com/lalrpop/lalrpop/issues/613)
    <start: @L> <expr: LetTerm> ":" <type_: LetTerm> <end: @R> => {
        Term::Ann(
            ByteRange::new(start, end),
            scope.to_scope(expr),
            scope.to_scope(type_),
        )
    },
};

LetTerm: Term<'arena, ByteRange> = {
    FunTerm,
    <start: @L> "let" <def_pattern: Pattern> <def_type: (":" <LetTerm>)?> "=" <def_expr: Term> ";" <body_expr: LetTerm> <end: @R> => {
        Term::Let(
            ByteRange::new(start, end),
            def_pattern,
            def_type.map(|def_type| scope.to_scope(def_type) as &_),
            scope.to_scope(def_expr),
            scope.to_scope(body_expr),
        )
    },
};

FunTerm: Term<'arena, ByteRange> = {
    AppTerm,
    <start: @L> <input_type: AppTerm> "->"  <output_type: FunTerm> <end: @R> => {
        Term::Arrow(
            ByteRange::new(start, end),
            scope.to_scope(input_type),
            scope.to_scope(output_type),
        )
    },
    <start: @L> "fun" <input_param: AnnPattern> "->"  <output_type: FunTerm> <end: @R> => {
        let (input_param, input_type) = input_param;
        Term::FunType(
            ByteRange::new(start, end),
            input_param,
            input_type,
            scope.to_scope(output_type),
        )
    },
    <start: @L> "fun" <input_param: AnnPattern> "=>" <output_type: LetTerm> <end: @R> => {
        let (input_param, input_type) = input_param;
        Term::FunLiteral(
            ByteRange::new(start, end),
            input_param,
            input_type,
            scope.to_scope(output_type),
        )
    },
};

AppTerm: Term<'arena, ByteRange> = {
    AtomicTerm,
    <start: @L> <head_expr: AppTerm> <input_expr: AtomicTerm> <end: @R> => {
        Term::App(
            ByteRange::new(start, end),
            scope.to_scope(head_expr),
            scope.to_scope(input_expr),
        )
    },
};

AtomicTerm: Term<'arena, ByteRange> = {
    "(" <term: Term> ")" => term,

    <start: @L> <name: Name> <end: @R> => Term::Name(ByteRange::new(start, end), name),
    <start: @L> "_" <end: @R> => Term::Placeholder(ByteRange::new(start, end)),
    <start: @L> <name: Hole> <end: @R> => Term::Hole(ByteRange::new(start, end), name),
    <start: @L> "match" <scrutinee: AtomicTerm> "{"  <equations: Seq<(<Pattern> "=>" <Term>), ",">> "}" <end: @R> => {
        Term::Match(ByteRange::new(start, end), scope.to_scope(scrutinee), equations)
    },
    <start: @L> "Type" <end: @R> => Term::Universe(ByteRange::new(start, end)),
    <start: @L> <string: StringLiteral> <end: @R> => Term::StringLiteral(ByteRange::new(start, end), string),
    <start: @L> <number: NumberLiteral> <end: @R> => Term::NumberLiteral(ByteRange::new(start, end), number),
    <start: @L> "true" <end: @R> => Term::BooleanLiteral(ByteRange::new(start, end), true),
    <start: @L> "false" <end: @R> => Term::BooleanLiteral(ByteRange::new(start, end), false),
    <start: @L> "{" "}" <end: @R> => Term::UnitLiteral(ByteRange::new(start, end)),
    <start: @L> "{" <fields: NonEmptySeq<(<RangedName> ":" <Term>), ",">> "}" <end: @R> => {
        Term::RecordType(ByteRange::new(start, end), fields)
    },
    <start: @L> "{" <fields: NonEmptySeq<(<RangedName> "=" <Term>), ",">> "}" <end: @R> => {
        Term::RecordLiteral(ByteRange::new(start, end), fields)
    },
    <start: @L> "{" <fields: NonEmptySeq<(<RangedName> "<-" <Term>), ",">> "}" <end: @R> => {
        Term::FormatRecord(ByteRange::new(start, end), fields)
    },
    <start: @L> "overlap" "{" <fields: NonEmptySeq<(<RangedName> "<-" <Term>), ",">> "}" <end: @R> => {
        Term::FormatOverlap(ByteRange::new(start, end), fields)
    },
    <start: @L> <head_expr: AtomicTerm> "." <label: RangedName> <end: @R> => {
        Term::Proj(ByteRange::new(start, end), scope.to_scope(head_expr), label)
    },
    <start: @L> "[" <exprs: Seq<Term, ",">> "]" <end: @R> => {
        Term::ArrayLiteral(ByteRange::new(start, end), exprs)
    },
    <start: @L> <error: !> <end: @R> => {
        messages.push(ParseMessage::from(error));
        Term::ReportedError(ByteRange::new(start, end))
    },
};

#[inline] Name: StringId = { <"name"> => interner.borrow_mut().get_or_intern(<>) };
#[inline] Hole: StringId = { <"hole"> => interner.borrow_mut().get_or_intern(<>) };
#[inline] StringLiteral: StringId = { <"string literal"> => interner.borrow_mut().get_or_intern(<>) };
#[inline] NumberLiteral: StringId = { <"number literal"> => interner.borrow_mut().get_or_intern(<>) };

#[inline]
RangedName: (ByteRange, StringId) = {
    <start: @L> <name: Name> <end: @R> => (ByteRange::new(start, end), name),
};

Seq<Elem, Sep>: &'arena [Elem] = {
    <elems: (<Elem> Sep)*> <last: Elem?> => {
        scope.to_scope_from_iter(elems.into_iter().chain(last))
    }
};

NonEmptySeq<Elem, Sep>: &'arena [Elem] = {
    <first: Elem> <elems: (Sep <Elem>)*> Sep? => {
        scope.to_scope_from_iter(std::iter::once(first).chain(elems))
    },
};
