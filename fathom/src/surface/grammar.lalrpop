use scoped_arena::Scope;

use crate::source::{ByteRange, BytePos};
use crate::surface::{
    Arg, BinOp, ExprField, FormatField, Item, ItemDef, Module, ParseMessage,
    Pattern, Param, Plicity, Term, TypeField, LetDef,
    Builder,
};
use crate::surface::lexer::{Error as LexerError, Token};
use crate::symbol::Symbol;

grammar<'arena, 'source>(
    scope: &'arena Scope<'arena>,
    messages: &mut Vec<ParseMessage>,
);

extern {
    type Location = BytePos;
    type Error = LexerError;

    enum Token<'source> {
        "name" => Token::Name(<&'source str>),
        "hole" => Token::Hole(<&'source str>),
        "string literal" => Token::StringLiteral(<&'source str>),
        "number literal" => Token::NumberLiteral(<&'source str>),

        "def" => Token::KeywordDef,
        "else" => Token::KeywordElse,
        "fun" => Token::KeywordFun,
        "if" => Token::KeywordIf,
        "let" => Token::KeywordLet,
        "match" => Token::KeywordMatch,
        "overlap" => Token::KeywordOverlap,
        "Type" => Token::KeywordType,
        "then" => Token::KeywordThen,
        "true" => Token::KeywordTrue,
        "false" => Token::KeywordFalse,
        "where" => Token::KeywordWhere,

        "@" => Token::At,
        ":" => Token::Colon,
        "," => Token::Comma,
        "=" => Token::Equals,
        "=>" => Token::EqualsGreater,
        "." => Token::FullStop,
        "/" => Token::ForwardSlash,
        "->" => Token::HyphenGreater,
        "<-" => Token::LessHyphen,
        "-" => Token::Minus,
        "|" => Token::Pipe,
        "+" => Token::Plus,
        ";" => Token::Semicolon,
        "*" => Token::Star,
        "_" => Token::Underscore,

        "!=" => Token::BangEquals,
        "==" => Token::EqualsEquals,
        ">=" => Token::GreaterEquals,
        ">" => Token::Greater,
        "<=" => Token::LessEquals,
        "<" => Token::Less,

        "{" => Token::OpenBrace,
        "}" => Token::CloseBrace,
        "[" => Token::OpenBracket,
        "]" => Token::CloseBracket,
        "(" => Token::OpenParen,
        ")" => Token::CloseParen,
    }
}

pub Module: Module<'arena, ByteRange> = {
    <items: List<Item>> => Module { items },
};

Item: Item<'arena, ByteRange> = {
    <start: @L> "def" <label: RangedName> <params: List<Param>> <r#type: (":" <LetTerm>)?> "=" <expr: Term> ";" <end: @R> => {
        Item::Def(ItemDef {
            range: ByteRange::new(start, end),
            label,
            params,
            r#type,
            expr,
        })
    },
    <start: @L> <error: !> <end: @R> => {
        messages.push(ParseMessage::from_lalrpop_recovery(error));
        Item::ReportedError(ByteRange::new(start, end))
    },
};

Pattern: Pattern<ByteRange> = {
    <start: @L> <name: Name> <end: @R> => Pattern::Name(ByteRange::new(start, end), name),
    <start: @L> "_" <end: @R> => Pattern::Placeholder(ByteRange::new(start, end)),
    <start: @L> <string: StringLiteral> <end: @R> => Pattern::StringLiteral(ByteRange::new(start, end), string),
    <start: @L> <number: NumberLiteral> <end: @R> => Pattern::NumberLiteral(ByteRange::new(start, end), number),
    <start: @L> "true" <end: @R> => Pattern::BooleanLiteral(ByteRange::new(start, end), true),
    <start: @L> "false" <end: @R> => Pattern::BooleanLiteral(ByteRange::new(start, end), false),
};

pub Term: Term<'arena, ByteRange> = {
    LetTerm,
    <start: @L> <expr: LetTerm> ":" <r#type: LetTerm> <end: @R> => {
        Builder::new(scope).ann((start, end), expr, r#type)
    },
};

LetTerm: Term<'arena, ByteRange> = {
    FunTerm,
    <start: @L> "let" <def: LetDef> ";" <body_expr: LetTerm> <end: @R> => {
        Builder::new(scope).r#let((start, end), def, body_expr)
    },
    <start: @L> "if" <cond_expr: FunTerm> "then" <then_expr: LetTerm> "else" <else_expr: LetTerm> <end: @R> => {
        Builder::new(scope).if_then_else((start, end), cond_expr, then_expr, else_expr)
    },
};

LetDef: LetDef<'arena, ByteRange> = {
    <pattern: Pattern> <r#type: (":" <LetTerm>)?> "=" <expr: Term> => LetDef {pattern, r#type, expr},
}

FunTerm: Term<'arena, ByteRange> = {
    EqExpr,
    <start: @L> <plicity: Plicity> <param_type: AppTerm> "->"  <body_type: FunTerm> <end: @R> => {
        Builder::new(scope).arrow((start, end), plicity, param_type, body_type)
    },
    <start: @L> "fun" <params: List1<Param>> "->"  <output_type: FunTerm> <end: @R> => {
        Builder::new(scope).fun_type((start, end), params, output_type)
    },
    <start: @L> "fun" <params: List1<Param>> "=>" <output_expr: LetTerm> <end: @R> => {
        Builder::new(scope).fun_lit((start, end), params, output_expr)
    },
};

EqExpr: Term<'arena, ByteRange> = {
    CmpExpr,
    BinExpr<CmpExpr, BinOpEq, EqExpr>,
    BinExpr<CmpExpr, BinOpNeq, EqExpr>,
};

CmpExpr: Term<'arena, ByteRange> = {
    AddExpr,
    BinExpr<AddExpr, BinOpLt, CmpExpr>,
    BinExpr<AddExpr, BinOpLte, CmpExpr>,
    BinExpr<AddExpr, BinOpGt, CmpExpr>,
    BinExpr<AddExpr, BinOpGte, CmpExpr>,
};

AddExpr: Term<'arena, ByteRange> = {
    MulExpr,
    BinExpr<MulExpr, BinOpAdd, AddExpr>,
    BinExpr<MulExpr, BinOpSub, AddExpr>,
};

MulExpr: Term<'arena, ByteRange> = {
    AppTerm,
    BinExpr<AppTerm, BinOpMul, MulExpr>,
    BinExpr<AppTerm, BinOpDiv, MulExpr>,
};

AppTerm: Term<'arena, ByteRange> = {
    ProjTerm,
    <start: @L> <head_expr: ProjTerm> <args: List1<Arg>> <end: @R> => {
        Builder::new(scope).fun_app((start, end), head_expr, args)
    },
};

ProjTerm: Term<'arena, ByteRange> = {
    AtomicTerm,
    <start: @L> <head_expr: AtomicTerm> <labels: List1<("." <RangedName>)>> <end: @R> => {
        Builder::new(scope).record_proj((start, end), head_expr, labels)
    },
};

AtomicTerm: Term<'arena, ByteRange> = {
    <start: @L> "(" <term: Term> ")" <end: @R> => Builder::new(scope).paren((start, end), term),
    <start: @L> <terms: Tuple<Term>> <end: @R> => Term::Tuple(ByteRange::new(start, end), terms),

    <start: @L> <name: Name> <end: @R> => Term::Name(ByteRange::new(start, end), name),
    <start: @L> "_" <end: @R> => Term::Placeholder(ByteRange::new(start, end)),
    <start: @L> <name: Hole> <end: @R> => Term::Hole(ByteRange::new(start, end), name),
    <start: @L> "match" <scrutinee: ProjTerm> "{"  <equations: Seq<(<Pattern> "=>" <Term>), ",">> "}" <end: @R> => {
        Builder::new(scope).r#match((start, end), scrutinee, equations)
    },
    <start: @L> "Type" <end: @R> => Term::Universe(ByteRange::new(start, end)),
    <start: @L> <string: StringLiteral> <end: @R> => Term::StringLiteral(ByteRange::new(start, end), string),
    <start: @L> <number: NumberLiteral> <end: @R> => Term::NumberLiteral(ByteRange::new(start, end), number),
    <start: @L> "true" <end: @R> => Term::BooleanLiteral(ByteRange::new(start, end), true),
    <start: @L> "false" <end: @R> => Term::BooleanLiteral(ByteRange::new(start, end), false),
    <start: @L> "{" "}" <end: @R> => Term::Tuple(ByteRange::new(start, end), &[]),
    <start: @L> "{" <fields: Seq1<TypeField, ",">> "}" <end: @R> => {
        Term::RecordType(ByteRange::new(start, end), fields)
    },
    <start: @L> "{" <fields: Seq1<ExprField, ",">> "}" <end: @R> => {
        Term::RecordLiteral(ByteRange::new(start, end), fields)
    },
    <start: @L> "{" <fields: Seq1<FormatField, ",">> "}" <end: @R> => {
        Term::FormatRecord(ByteRange::new(start, end), fields)
    },
    <start: @L> "{" <name: RangedName> "<-" <format:Term> "|" <cond:Term> "}" <end: @R> => {
        Builder::new(scope).format_cond((start, end), name, format, cond)
    },
    <start: @L> "overlap" "{" <fields: Seq1<FormatField, ",">> "}" <end: @R> => {
        Term::FormatOverlap(ByteRange::new(start, end), fields)
    },
    <start: @L> "[" <exprs: Seq<Term, ",">> "]" <end: @R> => {
        Term::ArrayLiteral(ByteRange::new(start, end), exprs)
    },
    <start: @L> <error: !> <end: @R> => {
        messages.push(ParseMessage::from_lalrpop_recovery(error));
        Term::ReportedError(ByteRange::new(start, end))
    },
};

FormatField: FormatField<'arena, ByteRange> = {
    <label: RangedName> "<-" <format: Term> <pred: ("where" <Term>)?> => {
        FormatField::Format { label, format, pred }
    },
    "let" <label: RangedName> <r#type: (":" <Term>)?> "=" <expr: Term> => {
        FormatField::Computed { label, r#type, expr }
    },
};

TypeField: TypeField<'arena, ByteRange> = {
    <label: RangedName> ":" <r#type: Term> => TypeField { label, r#type },
};

ExprField: ExprField<'arena, ByteRange> = {
    <label: RangedName> <expr: ("=" <Term>)?> => ExprField { label, expr },
};

BinExpr<Lhs, Op, Rhs>: Term<'arena, ByteRange> = {
    <start: @L> <lhs: Lhs> <op: Op> <rhs: Rhs> <end: @R> => {
        Builder::new(scope).binop((start, end), lhs, op, rhs)
    },
};

BinOpAdd: BinOp<ByteRange> = <start: @L> "+" <end: @R> => BinOp::Add(ByteRange::new(start, end));
BinOpSub: BinOp<ByteRange> = <start: @L> "-" <end: @R> => BinOp::Sub(ByteRange::new(start, end));
BinOpMul: BinOp<ByteRange> = <start: @L> "*" <end: @R> => BinOp::Mul(ByteRange::new(start, end));
BinOpDiv: BinOp<ByteRange> = <start: @L> "/" <end: @R> => BinOp::Div(ByteRange::new(start, end));

BinOpEq: BinOp<ByteRange> = <start: @L> "==" <end: @R> => BinOp::Eq(ByteRange::new(start, end));
BinOpNeq: BinOp<ByteRange> = <start: @L> "!=" <end: @R> => BinOp::Neq(ByteRange::new(start, end));
BinOpLt: BinOp<ByteRange> = <start: @L> "<" <end: @R> => BinOp::Lt(ByteRange::new(start, end));
BinOpLte: BinOp<ByteRange> = <start: @L> "<=" <end: @R> => BinOp::Lte(ByteRange::new(start, end));
BinOpGt: BinOp<ByteRange> = <start: @L> ">" <end: @R> => BinOp::Gt(ByteRange::new(start, end));
BinOpGte: BinOp<ByteRange> = <start: @L> ">=" <end: @R> => BinOp::Gte(ByteRange::new(start, end));

#[inline] Name: Symbol = { <"name"> => Symbol::intern(<>) };
#[inline] Hole: Symbol = { <"hole"> => Symbol::intern(<>) };
#[inline] StringLiteral: Symbol = { <"string literal"> => Symbol::intern(<>) };
#[inline] NumberLiteral: Symbol = { <"number literal"> => Symbol::intern(<>) };

Tuple<Elem>: &'arena [Elem] = {
    "(" ")" => &[],
    "(" <term: Term> "," ")" => scope.to_scope_from_iter([term]),
    "(" <terms: Seq2<Term, ",">> ")" => terms,
};

#[inline]
Plicity: Plicity = {
    () => Plicity::Explicit,
    "@" => Plicity::Implicit,
};

Param: Param<'arena, ByteRange> = {
    <plicity: Plicity> <pattern: Pattern> => Param { plicity, pattern, r#type: None },
    "(" <plicity: Plicity> <pattern: Pattern> ":" <r#type: LetTerm> ")" => Param { plicity, pattern, r#type: Some(r#type) },
};

Arg: Arg<'arena, ByteRange> = {
    <plicity: Plicity> <term: ProjTerm> => Arg {plicity, term},
};

#[inline]
RangedName: (ByteRange, Symbol) = {
    <start: @L> <name: Name> <end: @R> => (ByteRange::new(start, end), name),
};

List<Elem>: &'arena [Elem] = {
    <elems: Elem*> => {
        scope.to_scope_from_iter(elems)
    }
}

List1<Elem>: &'arena [Elem] = {
    <elems: Elem+> => {
        scope.to_scope_from_iter(elems)
    }
}

Seq<Elem, Sep>: &'arena [Elem] = {
    <elems: (<Elem> Sep)*> <last: Elem?> => {
        scope.to_scope_from_iter(elems.into_iter().chain(last))
    }
};

Seq1<Elem, Sep>: &'arena [Elem] = {
    <first: Elem> <elems: (Sep <Elem>)*> Sep? => {
        scope.to_scope_from_iter(std::iter::once(first).chain(elems))
    },
};

Seq2<Elem, Sep>: &'arena [Elem] = {
    <first: Elem> Sep <second: Elem> <elems: (Sep <Elem>)*> Sep? => {
        scope.to_scope_from_iter(std::iter::once(first).chain(std::iter::once(second)).chain(elems))
    },
};
