stdout = '''
def tag : Format = u32be;
def table_record : Format = {
    table_id <- tag,
    checksum <- u32be,
    offset <- u32be,
    length <- u32be,
};
def find_table : fun (num_tables : U16) -> Array16 num_tables {
    table_id : U32,
    checksum : U32,
    offset : U32,
    length : U32,
} -> U32 -> Option {
    table_id : U32,
    checksum : U32,
    offset : U32,
    length : U32,
} =
fun num_tables table_records table_id => array16_find num_tables (Repr table_record) (fun table_record => table_record.table_id == table_id) table_records;
def link_table : Pos -> {
    table_id : U32,
    checksum : U32,
    offset : U32,
    length : U32,
} -> Format -> Format =
fun file_start table_record table_format => link (file_start + table_record.offset) (limit32 table_record.length table_format);
def platform_id : Format = u16be;
def encoding_id : U16 -> Format = fun platform => u16be;
def empty : Format = ();
def offset32 : Pos -> Format -> Format = fun base format => {
    offset <- u32be,
    link <- match offset { 0 => empty, _ => link (base + offset) format },
};
def language_id : Format = u16be;
def cmap_language_id : U16 -> Format = fun platform => language_id;
def small_glyph_id : Format = u8;
def cmap_subtable_format0 : U16 -> Format = fun platform => {
    length <- u16be,
    language <- cmap_language_id platform,
    glyph_id_array <- array16 256 small_glyph_id,
};
def cmap_subtable_format2 : U16 -> Format = fun platform => {
    length <- u16be,
    language <- cmap_language_id platform,
    sub_header_keys <- array16 256 u16be,
};
def reserved : fun (format : Format) -> Repr format -> Format =
fun format default => format;
def cmap_subtable_format4 : U16 -> Format = fun platform => {
    length <- u16be,
    language <- cmap_language_id platform,
    seg_count_x2 <- u16be,
    let seg_count : U16 = seg_count_x2 / (2 : U16),
    search_range <- u16be,
    entry_selector <- u16be,
    range_shift <- u16be,
    end_code <- array16 seg_count u16be,
    _reserved_pad <- reserved s16be 0,
    start_code <- array16 seg_count u16be,
    id_delta <- array16 seg_count s16be,
    id_range_offsets <- array16 seg_count u16be,
};
def cmap_subtable_format6 : U16 -> Format = fun platform => {
    length <- u16be,
    language <- cmap_language_id platform,
    first_code <- u16be,
    entry_count <- u16be,
    glyph_id_array <- array16 entry_count u16be,
};
def language_id32 : Format = u32be;
def cmap_language_id32 : U16 -> Format = fun platform => language_id32;
def sequential_map_group : Format = {
    start_char_code <- u32be,
    end_char_code <- u32be,
    start_glyph_id <- u32be,
};
def cmap_subtable_format8 : U16 -> Format = fun platform => {
    _reserved <- reserved u16be 0,
    length <- u32be,
    language <- cmap_language_id32 platform,
    is32 <- array16 8192 u8,
    num_groups <- u32be,
    groups <- array32 num_groups sequential_map_group,
};
def cmap_subtable_format10 : U16 -> Format = fun platform => {
    _reserved <- reserved u16be 0,
    length <- u32be,
    language <- cmap_language_id32 platform,
    start_char_code <- u32be,
    num_chars <- u32be,
    glyph_id_array <- array32 num_chars u16be,
};
def cmap_subtable_format12 : U16 -> Format = fun platform => {
    _reserved <- reserved u16be 0,
    length <- u32be,
    language <- cmap_language_id32 platform,
    num_groups <- u32be,
    groups <- array32 num_groups sequential_map_group,
};
def constant_map_group : Format = sequential_map_group;
def cmap_subtable_format13 : U16 -> Format = fun platform => {
    _reserved <- reserved u16be 0,
    length <- u32be,
    language <- cmap_language_id32 platform,
    num_groups <- u32be,
    groups <- array32 num_groups constant_map_group,
};
def u24be : Format = array8 3 u8;
def unicode_range : Format = {
    start_unicode_value <- u24be,
    additional_count <- u8,
};
def default_uvs_table : Format = {
    num_unicode_value_ranges <- u32be,
    ranges <- array32 num_unicode_value_ranges unicode_range,
};
def uvs_mapping : Format = { unicode_value <- u24be, glyph_id <- u16be };
def non_default_uvs_table : Format = {
    num_uvs_mappings <- u32be,
    uvs_mappings <- array32 num_uvs_mappings uvs_mapping,
};
def variation_selector : Pos -> Format = fun table_start => {
    var_selector <- u24be,
    default_uvs_offset <- offset32 table_start default_uvs_table,
    non_default_uvs_offset <- offset32 table_start non_default_uvs_table,
};
def cmap_subtable_format14 : U16 -> Pos -> Format =
fun platform table_start => {
    length <- u32be,
    num_var_selector_records <- u32be,
    var_selector <- array32 num_var_selector_records (variation_selector table_start),
};
def unknown_table : Format = ();
def cmap_subtable : U16 -> Format = fun platform => {
    table_start <- stream_pos,
    format <- u16be,
    data <- match format {
        0 => cmap_subtable_format0 platform,
        2 => cmap_subtable_format2 platform,
        4 => cmap_subtable_format4 platform,
        6 => cmap_subtable_format6 platform,
        8 => cmap_subtable_format8 platform,
        10 => cmap_subtable_format10 platform,
        12 => cmap_subtable_format12 platform,
        13 => cmap_subtable_format13 platform,
        14 => cmap_subtable_format14 platform table_start,
        _ => unknown_table,
    },
};
def encoding_record : Pos -> Format = fun table_start => {
    platform <- platform_id,
    encoding <- encoding_id platform,
    subtable_offset <- offset32 table_start (cmap_subtable platform),
};
def cmap_table : Format = {
    table_start <- stream_pos,
    version <- u16be,
    num_tables <- u16be,
    encoding_records <- array16 num_tables (encoding_record table_start),
};
def fixed : Format = u32be;
def long_date_time : Format = s64be;
def deprecated : fun (format : Format) -> Repr format -> Format =
fun format default => format;
def head_table : Format = {
    major_version <- u16be where major_version == (1 : U16),
    minor_version <- u16be,
    font_revision <- fixed,
    checksum_adjustment <- u32be,
    magic_number <- u32be where magic_number == (0x5f0f3cf5 : U32),
    flags <- u16be,
    units_per_em <- u16be where bool_and (units_per_em >= (16 :
    U16)) (units_per_em <= (16384 : U16)),
    created <- long_date_time,
    modified <- long_date_time,
    glyph_extents <- {
        x_min <- s16be,
        y_min <- s16be,
        x_max <- s16be,
        y_max <- s16be,
    },
    mac_style <- u16be,
    lowest_rec_ppem <- u16be,
    font_direction_hint <- deprecated s16be 2,
    index_to_loc_format <- s16be,
    glyph_data_format <- s16be,
};
def fword : Format = s16be;
def ufword : Format = u16be;
def hhea_table : Format = {
    major_version <- u16be where major_version == (1 : U16),
    minor_version <- u16be,
    ascent <- fword,
    descent <- fword,
    line_gap <- fword,
    advance_width_max <- ufword,
    min_left_side_bearing <- fword,
    min_right_side_bearing <- fword,
    x_max_extent <- fword,
    caret_slope <- { rise <- s16be, run <- s16be },
    caret_offset <- s16be,
    _reserved0 <- reserved s16be 0,
    _reserved1 <- reserved s16be 0,
    _reserved2 <- reserved s16be 0,
    _reserved3 <- reserved s16be 0,
    metric_data_format <- s16be,
    number_of_long_horizontal_metrics <- u16be,
};
def version16dot16 : Format = u32be;
def maxp_version_1 : Format = {
    max_points <- u16be,
    max_contours <- u16be,
    max_composite_points <- u16be,
    max_composite_contours <- u16be,
    max_zones <- u16be,
    max_twilight_points <- u16be,
    max_storage <- u16be,
    max_function_defs <- u16be,
    max_instruction_defs <- u16be,
    max_stack_elements <- u16be,
    max_size_of_instructions <- u16be,
    max_component_elements <- u16be,
    max_component_depth <- u16be where max_component_depth <= (16 : U16),
};
def maxp_table : Format = {
    version <- version16dot16,
    num_glyphs <- u16be,
    data <- match version { 0x10000 => maxp_version_1, _ => unknown_table },
};
def long_horizontal_metric : Format = {
    advance_width <- u16be,
    left_side_bearing <- s16be,
};
def htmx_table : U16 -> U16 -> Format =
fun number_of_long_horizontal_metrics num_glyphs => {
    h_metrics <- array16 number_of_long_horizontal_metrics long_horizontal_metric,
    left_side_bearings <- array16 (num_glyphs - number_of_long_horizontal_metrics) s16be,
};
def offset16 : Pos -> Format -> Format = fun base format => {
    offset <- u16be,
    link <- match offset { 0 => empty, _ => link (base + offset) format },
};
def name_record : Pos -> Format = fun storage_start => {
    platform <- platform_id,
    encoding <- encoding_id platform,
    language <- language_id,
    name_id <- u16be,
    length <- u16be,
    offset <- offset16 storage_start (array16 length u8),
};
def lang_tag_record : Pos -> Format = fun storage_start => {
    length <- u16be,
    offset <- offset16 storage_start (array16 length u8),
};
def name_version_1 : Pos -> Format = fun storage_start => {
    lang_tag_count <- u16be,
    lang_tag_records <- array16 lang_tag_count (lang_tag_record storage_start),
};
def name_table : Format = {
    table_start <- stream_pos,
    version <- u16be,
    name_count <- u16be,
    storage_offset <- u16be,
    name_records <- array16 name_count (name_record (table_start + storage_offset)),
    data <- match version {
        0 => (),
        1 => name_version_1 (table_start + storage_offset),
        _ => unknown_table,
    },
};
def os2_version_0 : Format = {
    s_typo_ascender <- s16be,
    s_typo_descender <- s16be,
    s_typo_line_gap <- s16be,
    us_win_ascent <- u16be,
    usWinDescent <- u16be,
};
def os2_version_1 : Format = {
    version_0 <- os2_version_0,
    ul_code_page_range1 <- u32be,
    ul_code_page_range2 <- u32be,
};
def os2_version_2_3_4 : Format = {
    version_1 <- os2_version_1,
    sx_height <- s16be,
    s_cap_height <- s16be,
    us_default_char <- u16be,
    us_break_char <- u16be,
    us_max_context <- u16be,
};
def os2_version_5 : Format = {
    parent <- os2_version_2_3_4,
    usLowerOpticalPointSize <- u16be,
    usUpperOpticalPointSize <- u16be,
};
def os2_table : U32 -> Format = fun table_length => {
    version <- u16be,
    x_avg_char_width <- s16be,
    us_weight_class <- u16be,
    us_width_class <- u16be,
    fs_type <- u16be,
    y_subscript_x_size <- s16be,
    y_subscript_y_size <- s16be,
    y_subscript_x_offset <- s16be,
    y_subscript_y_offset <- s16be,
    y_superscript_x_size <- s16be,
    y_superscript_y_size <- s16be,
    y_superscript_x_offset <- s16be,
    y_superscript_y_offset <- s16be,
    y_strikeout_size <- s16be,
    y_strikeout_position <- s16be,
    s_family_class <- s16be,
    panose <- array8 10 u8,
    ul_unicode_range1 <- u32be,
    ul_unicode_range2 <- u32be,
    ul_unicode_range3 <- u32be,
    ul_unicode_range4 <- u32be,
    ach_vend_id <- tag,
    fs_selection <- u16be,
    us_first_char_index <- u16be,
    us_last_char_index <- u16be,
    data <- match version {
        0 => if table_length >= (78 : U32) then os2_version_0 else (),
        1 => os2_version_1,
        2 => os2_version_2_3_4,
        3 => os2_version_2_3_4,
        4 => os2_version_2_3_4,
        5 => os2_version_5,
        _ => os2_version_5,
    },
};
def post_table : Format = {
    version <- version16dot16,
    italic_angle <- fixed,
    underline_position <- fword,
    underline_thickness <- fword,
    is_fixed_pitch <- u32be,
    min_mem_type42 <- u32be,
    max_mem_type42 <- u32be,
    min_mem_type1 <- u32be,
    max_mem_type1 <- u32be,
    names <- match version {
        0x10000 => (),
        0x20000 => {
            num_glyphs <- u16be,
            glyph_name_index <- array16 num_glyphs u16be,
            string_data <- stream_pos,
        },
        0x25000 => { num_glyphs <- u16be, offset <- array16 num_glyphs s8 },
        0x30000 => (),
        _ => (),
    },
};
def glyph_header : Format = {
    number_of_contours <- s16be,
    x_min <- s16be,
    y_min <- s16be,
    x_max <- s16be,
    y_max <- s16be,
};
def args_are_signed : U16 -> Bool = fun flags => u16_and flags 0x2 != (0 : U16);
def arg_format : U16 -> Format = fun flags => if u16_and flags 0x1 != (0 : U16)
    then if args_are_signed flags then s16be else u16be
    else if args_are_signed flags then s8
    else u8;
def composite_glyph : Format = {
    flags <- u16be,
    glyphIndex <- u16be,
    argument1 <- arg_format flags,
    argument2 <- arg_format flags,
};
def simple_glyph : U16 -> Format = fun number_of_contours => {
    end_pts_of_contours <- array16 number_of_contours u16be,
    instruction_length <- u16be,
    instructions <- array16 instruction_length u8,
    let last_end_point_index : U16 = array16_index number_of_contours U16 (number_of_contours - (1 :
    U16)) end_pts_of_contours,
    let number_of_coords : U16 = last_end_point_index + (1 : U16),
};
def glyph : Format = {
    header <- glyph_header,
    data <- if header.number_of_contours < (0 : S16)
        then composite_glyph
        else simple_glyph (s16_unsigned_abs header.number_of_contours),
};
def glyf_table : U16 -> Format = fun num_glyphs => {
    glyphs <- array16 num_glyphs glyph,
};
def loca_table : U16 -> S16 -> Format = fun num_glyphs index_to_loc_format => {
    offsets <- match index_to_loc_format {
        0 => array16 (num_glyphs + (1 : U16)) u16be,
        1 => array16 (num_glyphs + (1 : U16)) u32be,
        _ => unknown_table,
    },
};
def base_table : Format = unknown_table;
def coverage_format_1 : Format = {
    glyph_count <- u16be,
    glyph_array <- array16 glyph_count u16be,
};
def coverage_format_2 : Format = let range_record : Format = {
    start_glyph_id <- u16be,
    end_glyph_id <- u16be,
    start_coverage_index <- u16be,
};
{ range_count <- u16be, range_records <- array16 range_count range_record };
def coverage_table : Format = {
    coverage_format <- u16be,
    data <- match coverage_format {
        1 => coverage_format_1,
        2 => coverage_format_2,
        _ => unknown_table,
    },
};
def mark_glyph_sets : Format = {
    table_start <- stream_pos,
    format <- u16be,
    mark_glyph_set_count <- u16be,
    coverage <- array16 mark_glyph_set_count (offset32 table_start coverage_table),
};
def class_def_format_1 : Format = {
    start_glyph_id <- u16be,
    glyph_count <- u16be,
    class_value_array <- array16 glyph_count u16be,
};
def class_def_format_2 : Format = let class_range_record : Format = {
    start_glyph_id <- u16be,
    end_glyph_id <- u16be,
    class <- u16be,
};
{
    class_range_count <- u16be,
    class_range_records <- array16 class_range_count class_range_record,
};
def class_def : Format = {
    class_format <- u16be,
    data <- match class_format {
        1 => class_def_format_1,
        2 => class_def_format_2,
        _ => unknown_table,
    },
};
def attach_list : Format = let attach_point_table : Format = {
    point_count <- u16be,
    point_indices <- array16 point_count u16be,
};
{
    table_start <- stream_pos,
    coverage <- offset16 table_start coverage_table,
    glyph_count <- u16be,
    attach_point_offsets <- array16 glyph_count (offset16 table_start attach_point_table),
};
def device_table : Format = let u16_div_ceil : U16 -> U16 -> U16 =
fun numerator denominator => let quotient : U16 = numerator / denominator;
if (quotient * denominator) < numerator then quotient + (1 : U16) else quotient;
let delta_bits : U16 -> U16 -> U16 =
fun delta_format num_sizes => match delta_format {
    0x1 => num_sizes * (2 : U16),
    0x2 => num_sizes * (4 : U16),
    0x3 => num_sizes * (8 : U16),
    _ => 0,
};
let num_sizes : U16 -> U16 -> U16 = fun start end => end - start + (1 : U16);
{
    start_size <- u16be,
    end_size <- u16be,
    delta_format <- u16be,
    delta_values <- let delta_bits : U16 =
    delta_bits delta_format (num_sizes start_size end_size);
    array16 (u16_div_ceil delta_bits 16) u16be,
};
def variation_index_table : Format = {
    delta_set_outer_index <- u16be,
    delta_set_inner_index <- u16be,
};
def device_or_variation_index_table : Format = overlap {
    init <- { _skipped <- array8 4 u8, table_format <- u16be },
    table <- match init.table_format {
        0x1 => device_table,
        0x2 => device_table,
        0x3 => device_table,
        0x8000 => variation_index_table,
        _ => unknown_table,
    },
};
def caret_value : Format = let caret_value_format_1 : Format = {
    coordinate <- s16be,
};
let caret_value_format_2 : Format = { caret_value_point_index <- u16be };
let caret_value_format_3 : Pos -> Format = fun table_start => {
    coordinate <- s16be,
    table <- offset16 table_start device_or_variation_index_table,
};
{
    table_start <- stream_pos,
    caret_value_format <- u16be,
    data <- match caret_value_format {
        1 => caret_value_format_1,
        2 => caret_value_format_2,
        3 => caret_value_format_3 table_start,
        _ => unknown_table,
    },
};
def lig_glyph : Format = {
    table_start <- stream_pos,
    caret_count <- u16be,
    caret_values <- array16 caret_count (offset16 table_start caret_value),
};
def lig_caret_list : Format = {
    table_start <- stream_pos,
    coverage <- offset16 table_start coverage_table,
    lig_glyph_count <- u16be,
    lig_glyph_offsets <- array16 lig_glyph_count (offset16 table_start lig_glyph),
};
def gdef_table : Format = let gdef_header_version_1_2 : Pos -> Format =
fun gdef_start => {
    mark_glyph_sets_def <- offset16 gdef_start mark_glyph_sets,
};
let gdef_header_version_1_3 : Pos -> Format = fun gdef_start => {
    item_var_store <- u32be,
};
{
    table_start <- stream_pos,
    major_version <- u16be where major_version == (1 : U16),
    minor_version <- u16be,
    glyph_class_def <- offset16 table_start class_def,
    attach_list <- offset16 table_start attach_list,
    lig_caret_list <- offset16 table_start lig_caret_list,
    mark_attach_class_def <- offset16 table_start class_def,
    data <- match minor_version {
        0 => (),
        1 => (),
        2 => gdef_header_version_1_2 table_start,
        3 => gdef_header_version_1_3 table_start,
        _ => gdef_header_version_1_3 table_start,
    },
};
def lang_sys : Format = {
    lookup_order_offset <- u16be,
    required_feature_index <- u16be,
    feature_index_count <- u16be,
    feature_indices <- array16 feature_index_count u16be,
};
def lang_sys_record : Pos -> Format = fun script_start => {
    lang_sys_tag <- tag,
    lang_sys <- offset16 script_start lang_sys,
};
def script_table : Format = {
    table_start <- stream_pos,
    default_lang_sys <- offset16 table_start lang_sys,
    lang_sys_count <- u16be,
    lang_sys_records <- array16 lang_sys_count (lang_sys_record table_start),
};
def script_list : Format = let script_record : Pos -> Format =
fun script_list_start => {
    script_tag <- tag,
    script <- offset16 script_list_start script_table,
};
{
    table_start <- stream_pos,
    script_count <- u16be,
    script_records <- array16 script_count (script_record table_start),
};
def feature_table : Format = {
    table_start <- stream_pos,
    feature_params <- u16be,
    lookup_index_count <- u16be,
    lookup_list_indices <- array16 lookup_index_count u16be,
};
def feature_list : Format = let feature_record : Pos -> Format =
fun feature_list_start => {
    feature_tag <- tag,
    feature <- offset16 feature_list_start feature_table,
};
{
    table_start <- stream_pos,
    feature_count <- u16be,
    feature_records <- array16 feature_count (feature_record table_start),
};
def single_substitution : Format = {
    table_start <- stream_pos,
    subst_format <- u16be,
    subst <- match subst_format {
        1 => {
            coverage <- offset16 table_start coverage_table,
            delta_glyph_id <- s16be,
        },
        2 => {
            coverage <- offset16 table_start coverage_table,
            glyph_count <- u16be,
            substitute_glyph_ids <- array16 glyph_count u16be,
        },
        _ => unknown_table,
    },
};
def multiple_substitution : Format = let sequence_table : Format = {
    glyph_count <- u16be,
    substitute_glyph_ids <- array16 glyph_count u16be,
};
{
    table_start <- stream_pos,
    subst_format <- u16be,
    coverage <- offset16 table_start coverage_table,
    subst <- match subst_format {
        1 => {
            sequence_count <- u16be,
            sequences <- array16 sequence_count (offset16 table_start sequence_table),
        },
        _ => unknown_table,
    },
};
def alternate_substitution : Format = let alternate_set : Format = {
    glyph_count <- u16be,
    alternate_glyph_ids <- array16 glyph_count u16be,
};
{
    table_start <- stream_pos,
    subst_format <- u16be,
    coverage <- offset16 table_start coverage_table,
    subst <- match subst_format {
        1 => {
            alternate_set_count <- u16be,
            alternate_sets <- array16 alternate_set_count (offset16 table_start alternate_set),
        },
        _ => unknown_table,
    },
};
def ligature_substitution : Format = let ligature_table : Format = {
    ligature_glyph <- u16be,
    component_count <- u16be,
    component_glyph_ids <- array16 (component_count - (1 : U16)) u16be,
};
let ligature_set : Format = {
    table_start <- stream_pos,
    ligature_count <- u16be,
    ligatures <- array16 ligature_count (offset16 table_start ligature_table),
};
{
    table_start <- stream_pos,
    subst_format <- u16be,
    coverage <- offset16 table_start coverage_table,
    subst <- match subst_format {
        1 => {
            ligature_set_count <- u16be,
            ligature_sets <- array16 ligature_set_count (offset16 table_start ligature_set),
        },
        _ => unknown_table,
    },
};
def sequence_lookup_record : Format = {
    sequence_index <- u16be,
    lookup_list_index <- u16be,
};
def sequence_context_format1 : Format = let sequence_rule : Format = {
    glyph_count <- u16be,
    seq_lookup_count <- u16be,
    input_sequence <- array16 (glyph_count - (1 : U16)) u16be,
    seq_lookup_records <- array16 seq_lookup_count sequence_lookup_record,
};
let sequence_rule_set : Format = {
    table_start <- stream_pos,
    seq_rule_count <- u16be,
    seq_rules <- array16 seq_rule_count (offset16 table_start sequence_rule),
};
{
    table_start <- stream_pos,
    coverage <- offset16 table_start coverage_table,
    seq_rule_set_count <- u16be,
    seq_rule_sets <- array16 seq_rule_set_count (offset16 table_start sequence_rule_set),
};
def sequence_context_format2 : Format = let class_sequence_rule : Format = {
    glyph_count <- u16be,
    seq_lookup_count <- u16be,
    input_sequence <- array16 (glyph_count - (1 : U16)) u16be,
    seqLookupRecords <- array16 seq_lookup_count sequence_lookup_record,
};
let class_sequence_rule_set : Format = {
    table_start <- stream_pos,
    class_seq_rule_count <- u16be,
    class_seq_rules <- array16 class_seq_rule_count (offset16 table_start class_sequence_rule),
};
{
    table_start <- stream_pos,
    coverage <- offset16 table_start coverage_table,
    class_def <- offset16 table_start class_def,
    class_seq_rule_set_count <- u16be,
    class_seq_rule_sets <- array16 class_seq_rule_set_count (offset16 table_start class_sequence_rule_set),
};
def sequence_context_format3 : Format = {
    table_start <- stream_pos,
    glyph_count <- u16be,
    seq_lookup_count <- u16be,
    coverage_tables <- array16 glyph_count (offset16 table_start coverage_table),
    seq_lookup_records <- array16 seq_lookup_count sequence_lookup_record,
};
def sequence_context : Format = {
    format <- u16be,
    subst <- match format {
        1 => sequence_context_format1,
        2 => sequence_context_format2,
        3 => sequence_context_format3,
        _ => unknown_table,
    },
};
def contextual_substitution : Format = sequence_context;
def chained_sequence_context : Format = {
    format <- u16be,
    subst <- match format {
        1 => sequence_context_format1,
        2 => sequence_context_format2,
        3 => sequence_context_format3,
        _ => unknown_table,
    },
};
def chained_contexts_substitution : Format = chained_sequence_context;
def reverse_chaining_contextual_single_substitution : Format =
let reverse_chain_single_subst_format1 : Format = {
    table_start <- stream_pos,
    coverage <- offset16 table_start coverage_table,
    backtrack_glyph_count <- u16be,
    backtrack_coverage_tables <- array16 backtrack_glyph_count (offset16 table_start coverage_table),
    lookahead_glyph_count <- u16be,
    lookahead_coverage_tables <- array16 lookahead_glyph_count (offset16 table_start coverage_table),
    glyph_count <- u16be,
    substitute_glyph_ids <- array16 glyph_count u16be,
};
{
    subst_format <- u16be,
    subtable <- match subst_format {
        1 => reverse_chain_single_subst_format1,
        _ => unknown_table,
    },
};
def extension_substitution : Format = let extension_subst_format1 : Format = {
    table_start <- stream_pos,
    extension_lookup_type <- u16be,
    extension_subtable <- match extension_lookup_type {
        1 => single_substitution,
        2 => multiple_substitution,
        3 => alternate_substitution,
        4 => ligature_substitution,
        5 => contextual_substitution,
        6 => chained_contexts_substitution,
        7 => fail,
        8 => reverse_chaining_contextual_single_substitution,
        _ => unknown_table,
    },
};
{
    subst_format <- u16be,
    subtable <- match subst_format {
        1 => extension_subst_format1,
        _ => unknown_table,
    },
};
def value_record : Pos -> U16 -> Format =
fun table_start flags => let X_PLACEMENT : U16 = 0x1;
let Y_PLACEMENT : U16 = 0x2;
let X_ADVANCE : U16 = 0x4;
let Y_ADVANCE : U16 = 0x8;
let X_PLACEMENT_DEVICE : U16 = 0x10;
let Y_PLACEMENT_DEVICE : U16 = 0x20;
let X_ADVANCE_DEVICE : U16 = 0x40;
let Y_ADVANCE_DEVICE : U16 = 0x80;
let optional_field : U16 -> Format -> Format =
fun field format => if u16_and flags field != (0 : U16) then format else empty;
{
    x_placement <- optional_field X_PLACEMENT s16be,
    y_placement <- optional_field Y_PLACEMENT s16be,
    x_advance <- optional_field X_ADVANCE s16be,
    y_advance <- optional_field Y_ADVANCE s16be,
    x_pla_device_offset <- optional_field X_PLACEMENT_DEVICE (offset16 table_start device_or_variation_index_table),
    y_pla_device_offset <- optional_field Y_PLACEMENT_DEVICE (offset16 table_start device_or_variation_index_table),
    x_adv_device_offset <- optional_field X_ADVANCE_DEVICE (offset16 table_start device_or_variation_index_table),
    y_adv_device_offset <- optional_field Y_ADVANCE_DEVICE (offset16 table_start device_or_variation_index_table),
};
def single_adjustment : Format = let single_pos_format1 : Pos -> Format =
fun table_start => {
    coverage_offset <- offset16 table_start coverage_table,
    value_format <- u16be,
    value_record <- value_record table_start value_format,
};
let single_pos_format2 : Pos -> Format = fun table_start => {
    coverage_offset <- offset16 table_start coverage_table,
    value_format <- u16be,
    value_count <- u16be,
    value_records <- array16 value_count (value_record table_start value_format),
};
{
    table_start <- stream_pos,
    pos_format <- u16be,
    subtable <- match pos_format {
        1 => single_pos_format1 table_start,
        2 => single_pos_format2 table_start,
        _ => unknown_table,
    },
};
def optional_value_record : Pos -> U16 -> Format =
fun table_start flags => if flags == (0 : U16)
    then empty
    else value_record table_start flags;
def pair_adjustment : Format = let pair_value_record : Pos -> U16 -> U16 ->
Format = fun table_start value_format1 value_format2 => {
    second_glyph <- u16be,
    value_record1 <- optional_value_record table_start value_format1,
    value_record2 <- optional_value_record table_start value_format2,
};
let pair_set : U16 -> U16 -> Format = fun value_format1 value_format2 => {
    table_start <- stream_pos,
    pair_value_count <- u16be,
    pair_value_records <- array16 pair_value_count (pair_value_record table_start value_format1 value_format2),
};
let pair_pos_format1 : Pos -> Format = fun table_start => {
    coverage <- offset16 table_start coverage_table,
    value_format1 <- u16be,
    value_format2 <- u16be,
    pair_set_count <- u16be,
    pair_sets <- array16 pair_set_count (offset16 table_start (pair_set value_format1 value_format2)),
};
let class2_record : Pos -> U16 -> U16 -> Format =
fun table_start value_format1 value_format2 => {
    value_record1 <- optional_value_record table_start value_format1,
    value_record2 <- optional_value_record table_start value_format2,
};
let class1_record : Pos -> U16 -> U16 -> U16 -> Format =
fun table_start class2_count value_format1 value_format2 => {
    class2_records <- array16 class2_count (class2_record table_start value_format1 value_format2),
};
let pair_pos_format2 : Pos -> Format = fun pair_pos_start => {
    coverage <- offset16 pair_pos_start coverage_table,
    value_format1 <- u16be,
    value_format2 <- u16be,
    class_def1 <- offset16 pair_pos_start class_def,
    class_def2 <- offset16 pair_pos_start class_def,
    class1_count <- u16be,
    class2_count <- u16be,
    class1_records <- array16 class1_count (class1_record pair_pos_start class2_count value_format1 value_format2),
};
{
    table_start <- stream_pos,
    pos_format <- u16be,
    subtable <- match pos_format {
        1 => pair_pos_format1 table_start,
        2 => pair_pos_format2 table_start,
        _ => unknown_table,
    },
};
def anchor_table : Format = {
    table_start <- stream_pos,
    anchor_format <- u16be,
    table <- match anchor_format {
        1 => { x_coordinate <- s16be, y_coordinate <- s16be },
        2 => {
            x_coordinate <- s16be,
            y_coordinate <- s16be,
            anchor_point <- u16be,
        },
        3 => {
            x_coordinate <- s16be,
            y_coordinate <- s16be,
            x_device_offset <- offset16 table_start device_or_variation_index_table,
            y_device_offset <- offset16 table_start device_or_variation_index_table,
        },
        _ => unknown_table,
    },
};
def cursive_attachment : Format = let entry_exit_record : Pos -> Format =
fun table_start => {
    entry_anchor <- offset16 table_start anchor_table,
    exit_anchor <- offset16 table_start anchor_table,
};
let cursive_pos_format1 : Pos -> Format = fun table_start => {
    coverage <- offset16 table_start coverage_table,
    entry_exit_count <- u16be,
    entry_exit_record <- array16 entry_exit_count (entry_exit_record table_start),
};
{
    table_start <- stream_pos,
    pos_format <- u16be,
    subtable <- match pos_format {
        1 => cursive_pos_format1 table_start,
        _ => unknown_table,
    },
};
def mark_array_table : Format = let mark_record : Pos -> Format =
fun table_start => {
    mark_class <- u16be,
    mark_anchor_offset <- offset16 table_start anchor_table,
};
{
    table_start <- stream_pos,
    mark_count <- u16be,
    mark_records <- array16 mark_count (mark_record table_start),
};
def mark_to_base_attachment : Format = let base_record : Pos -> U16 -> Format =
fun table_start mark_class_count => {
    base_anchors <- array16 mark_class_count (offset16 table_start anchor_table),
};
let base_array_table : Pos -> U16 -> Format =
fun table_start mark_class_count => {
    base_count <- u16be,
    base_records <- array16 base_count (base_record table_start mark_class_count),
};
let mark_base_pos_format1 : Pos -> Format = fun table_start => {
    mark_coverage <- offset16 table_start coverage_table,
    base_coverage <- offset16 table_start coverage_table,
    mark_class_count <- u16be,
    mark_array <- offset16 table_start mark_array_table,
    base_array <- offset16 table_start (base_array_table table_start mark_class_count),
};
{
    table_start <- stream_pos,
    pos_format <- u16be,
    subtable <- match pos_format {
        1 => mark_base_pos_format1 table_start,
        _ => unknown_table,
    },
};
def mark_to_ligature_attachment : Format = let component_record : Pos -> U16 ->
Format = fun table_start mark_class_count => {
    ligature_anchors <- array16 mark_class_count (offset16 table_start anchor_table),
};
let ligature_attach : Pos -> U16 -> Format =
fun table_start mark_class_count => {
    component_count <- u16be,
    component_records <- array16 component_count (component_record table_start mark_class_count),
};
let ligature_array : Pos -> U16 -> Format =
fun table_start mark_class_count => {
    ligature_count <- u16be,
    ligature_attaches <- array16 ligature_count (offset16 table_start (ligature_attach table_start mark_class_count)),
};
let mark_lig_pos_format1 : Pos -> Format = fun table_start => {
    mark_coverage <- offset16 table_start coverage_table,
    ligature_coverage <- offset16 table_start coverage_table,
    mark_class_count <- u16be,
    mark_array <- offset16 table_start mark_array_table,
    ligature_array <- offset16 table_start (ligature_array table_start mark_class_count),
};
{
    table_start <- stream_pos,
    pos_format <- u16be,
    subtable <- match pos_format {
        1 => mark_lig_pos_format1 table_start,
        _ => unknown_table,
    },
};
def mark_to_mark_attachment : Format = mark_to_base_attachment;
def contextual_positioning : Format = sequence_context;
def chained_contexts_positioning : Format = chained_sequence_context;
def extension_positioning : Format = let extension_pos_format1 : Format = {
    table_start <- stream_pos,
    extension_lookup_type <- u16be,
    extension_subtable <- match extension_lookup_type {
        1 => single_adjustment,
        2 => pair_adjustment,
        3 => cursive_attachment,
        4 => mark_to_base_attachment,
        5 => mark_to_ligature_attachment,
        6 => mark_to_mark_attachment,
        7 => contextual_positioning,
        8 => chained_contexts_positioning,
        _ => unknown_table,
    },
};
{
    pos_format <- u16be,
    subtable <- match pos_format {
        1 => extension_pos_format1,
        _ => unknown_table,
    },
};
def lookup_table : U32 -> Format = fun tag => let USE_MARK_FILTERING_SET : U16 =
0x10;
let lookup_subtable : U32 -> U16 -> Format = fun tag lookup_type => match tag {
    "GPOS" => match lookup_type {
        1 => single_adjustment,
        2 => pair_adjustment,
        3 => cursive_attachment,
        4 => mark_to_base_attachment,
        5 => mark_to_ligature_attachment,
        6 => mark_to_mark_attachment,
        7 => contextual_positioning,
        8 => chained_contexts_positioning,
        9 => extension_positioning,
        _ => unknown_table,
    },
    "GSUB" => match lookup_type {
        1 => single_substitution,
        2 => multiple_substitution,
        3 => alternate_substitution,
        4 => ligature_substitution,
        5 => contextual_substitution,
        6 => chained_contexts_substitution,
        7 => extension_substitution,
        8 => reverse_chaining_contextual_single_substitution,
        _ => unknown_table,
    },
    _ => fail,
};
{
    table_start <- stream_pos,
    lookup_type <- u16be,
    lookup_flag <- u16be,
    sub_table_count <- u16be,
    subtables <- array16 sub_table_count (offset16 table_start (lookup_subtable tag lookup_type)),
    mark_filtering_set <- if u16_and lookup_flag USE_MARK_FILTERING_SET != (0 :
    U16)
        then u16be
        else empty,
};
def lookup_list : U32 -> Format = fun tag => {
    table_start <- stream_pos,
    lookup_count <- u16be,
    lookups <- array16 lookup_count (offset16 table_start (lookup_table tag)),
};
def layout_table : U32 -> Format = fun tag => {
    table_start <- stream_pos,
    major_version <- u16be where major_version == (1 : U16),
    minor_version <- u16be,
    script_list <- offset16 table_start script_list,
    feature_list <- offset16 table_start feature_list,
    lookup_list <- offset16 table_start (lookup_list tag),
};
def gpos_table : Format = layout_table "GPOS";
def gsub_table : Format = layout_table "GSUB";
def jstf_table : Format = unknown_table;
def math_table : Format = unknown_table;
def table_directory : Pos -> Format = fun file_start => {
    sfnt_version <- u32be where bool_or (sfnt_version == (0x10000 :
    U32)) (sfnt_version == ("OTTO" : U32)),
    num_tables <- u16be,
    search_range <- u16be,
    entry_selector <- u16be,
    range_shift <- u16be,
    table_records <- array16 num_tables table_record,
    table_links <- let required_table : U32 -> Format -> Format =
    fun table_id table_format => {
        table_record <- unwrap (Repr table_record) (find_table num_tables table_records table_id),
        link <- link_table file_start table_record table_format,
    };
    let required_table_with_len : U32 -> (U32 -> Format) -> Format =
    fun table_id table_format => {
        table_record <- unwrap (Repr table_record) (find_table num_tables table_records table_id),
        link <- link_table file_start table_record (table_format table_record.length),
    };
    let optional_table : U32 -> Format -> Format =
    fun table_id table_format => option_fold (Repr table_record) Format () (fun record => link_table file_start record table_format) (find_table num_tables table_records table_id);
    {
        cmap <- required_table "cmap" cmap_table,
        head <- required_table "head" head_table,
        hhea <- required_table "hhea" hhea_table,
        maxp <- required_table "maxp" maxp_table,
        htmx <- required_table "hmtx" {
            hhea <- deref (limit32 hhea.table_record.length {
                major_version <- u16be where major_version == (1 : U16),
                minor_version <- u16be,
                ascent <- s16be,
                descent <- s16be,
                line_gap <- s16be,
                advance_width_max <- u16be,
                min_left_side_bearing <- s16be,
                min_right_side_bearing <- s16be,
                x_max_extent <- s16be,
                caret_slope <- { rise <- s16be, run <- s16be },
                caret_offset <- s16be,
                _reserved0 <- s16be,
                _reserved1 <- s16be,
                _reserved2 <- s16be,
                _reserved3 <- s16be,
                metric_data_format <- s16be,
                number_of_long_horizontal_metrics <- u16be,
            }) hhea.link,
            maxp <- deref (limit32 maxp.table_record.length maxp_table) maxp.link,
            table <- htmx_table hhea.number_of_long_horizontal_metrics maxp.num_glyphs,
        },
        name <- required_table "name" name_table,
        os2 <- required_table_with_len "OS/2" os2_table,
        post <- required_table "post" post_table,
        cvt <- optional_table "cvt " unknown_table,
        fpgm <- optional_table "fpgm" unknown_table,
        glyf <- optional_table "glyf" {
            maxp <- deref (limit32 maxp.table_record.length maxp_table) maxp.link,
            table <- glyf_table 1,
        },
        loca <- optional_table "loca" {
            maxp <- deref (limit32 maxp.table_record.length maxp_table) maxp.link,
            head <- deref (limit32 head.table_record.length {
                major_version <- u16be where major_version == (1 : U16),
                minor_version <- u16be,
                font_revision <- u32be,
                checksum_adjustment <- u32be,
                magic_number <- u32be where magic_number == (0x5f0f3cf5 : U32),
                flags <- u16be,
                units_per_em <- u16be where bool_and (units_per_em >= (16 :
                U16)) (units_per_em <= (16384 : U16)),
                created <- s64be,
                modified <- s64be,
                glyph_extents <- {
                    x_min <- s16be,
                    y_min <- s16be,
                    x_max <- s16be,
                    y_max <- s16be,
                },
                mac_style <- u16be,
                lowest_rec_ppem <- u16be,
                font_direction_hint <- s16be,
                index_to_loc_format <- s16be,
                glyph_data_format <- s16be,
            }) head.link,
            table <- loca_table maxp.num_glyphs head.index_to_loc_format,
        },
        prep <- optional_table "prep" unknown_table,
        gasp <- optional_table "gasp" unknown_table,
        cff <- optional_table "CFF " unknown_table,
        cff2 <- optional_table "CFF2" unknown_table,
        vorg <- optional_table "VORG" unknown_table,
        svg <- optional_table "SVG " unknown_table,
        ebdt <- optional_table "EBDT" unknown_table,
        eblc <- optional_table "EBLC" unknown_table,
        ebsc <- optional_table "EBSC" unknown_table,
        cbdt <- optional_table "CBDT" unknown_table,
        cblc <- optional_table "CBLC" unknown_table,
        sbix <- optional_table "sbix" unknown_table,
        base <- optional_table "BASE" base_table,
        gdef <- optional_table "GDEF" gdef_table,
        gpos <- optional_table "GPOS" gpos_table,
        gsub <- optional_table "GSUB" gsub_table,
        jstf <- optional_table "JSTF" jstf_table,
        math <- optional_table "MATH" math_table,
        avar <- optional_table "avar" unknown_table,
        cvar <- optional_table "cvar" unknown_table,
        fvar <- optional_table "fvar" unknown_table,
        gvar <- optional_table "gvar" unknown_table,
        hvar <- optional_table "HVAR" unknown_table,
        mvar <- optional_table "MVAR" unknown_table,
        stat <- optional_table "STAT" unknown_table,
        vvar <- optional_table "VVAR" unknown_table,
        colr <- optional_table "COLR" unknown_table,
        cpal <- optional_table "CPAL" unknown_table,
        dsig <- optional_table "DSIG" unknown_table,
        hdmx <- optional_table "hdmx" unknown_table,
        kern <- optional_table "kern" unknown_table,
        ltsh <- optional_table "LTSH" unknown_table,
        merg <- optional_table "MERG" unknown_table,
        meta <- optional_table "meta" unknown_table,
        pclt <- optional_table "PCLT" unknown_table,
        vdmx <- optional_table "VDMX" unknown_table,
        vhea <- optional_table "vhea" unknown_table,
        vmtx <- optional_table "vmtx" unknown_table,
    },
};
def ttc_header : Pos -> Format = fun start => let ttc_header1 : Pos -> Format =
fun start => {
    num_fonts <- u32be,
    table_directories <- array32 num_fonts (offset32 start (table_directory start)),
};
let ttc_header2 : Pos -> Format = fun start => {
    num_fonts <- u32be,
    table_directories <- array32 num_fonts (offset32 start (table_directory start)),
    dsig_tag <- u32be,
    dsig_length <- u32be,
    dsig_offset <- u32be,
};
{
    ttc_tag <- tag,
    major_version <- u16be,
    minor_version <- u16be,
    header <- match major_version {
        1 => ttc_header1 start,
        2 => ttc_header2 start,
        _ => unknown_table,
    },
};
def main : Format = {
    start <- stream_pos,
    font <- overlap {
        magic <- u32be,
        directory <- match magic {
            0x10000 => table_directory start,
            "OTTO" => table_directory start,
            "ttcf" => ttc_header start,
            _ => unknown_table,
        },
    },
};
def f2dot14 : Format = s16be;
def chained_sequence_context_format_1 : Format = let chained_sequence_rule :
Format = {
    backtrack_glyph_count <- u16be,
    backtrack_sequence <- array16 backtrack_glyph_count u16be,
    input_glyph_count <- u16be,
    input_sequence <- array16 (input_glyph_count - (1 : U16)) u16be,
    lookahead_glyph_count <- u16be,
    lookahead_sequence <- array16 lookahead_glyph_count u16be,
    seq_lookup_count <- u16be,
    seq_lookup_records <- array16 seq_lookup_count sequence_lookup_record,
};
let chained_sequence_rule_set : Format = {
    table_start <- stream_pos,
    chained_seq_rule_count <- u16be,
    chained_seq_rules <- array16 chained_seq_rule_count (offset16 table_start chained_sequence_rule),
};
{
    table_start <- stream_pos,
    coverage <- offset16 table_start coverage_table,
    chained_seq_rule_set_count <- u16be,
    chained_seq_rule_sets <- array16 chained_seq_rule_set_count (offset16 table_start chained_sequence_rule_set),
};
def chained_sequence_context_format_2 : Format =
let chained_class_sequence_rule : Format = {
    backtrack_glyph_count <- u16be,
    backtrack_sequence <- array16 backtrack_glyph_count u16be,
    input_glyph_count <- u16be,
    input_sequence <- array16 (input_glyph_count - (1 : U16)) u16be,
    lookahead_glyph_count <- u16be,
    lookahead_sequence <- array16 lookahead_glyph_count u16be,
    seq_lookup_count <- u16be,
    seq_lookup_records <- array16 seq_lookup_count sequence_lookup_record,
};
let chained_class_sequence_rule_set : Format = {
    table_start <- stream_pos,
    chained_class_seq_rule_count <- u16be,
    chained_class_seq_rules <- array16 chained_class_seq_rule_count (offset16 table_start chained_class_sequence_rule),
};
{
    table_start <- stream_pos,
    coverage <- offset16 table_start coverage_table,
    backtrack_class_def <- offset16 table_start class_def,
    input_class_def <- offset16 table_start class_def,
    lookahead_class_def <- offset16 table_start class_def,
    chained_class_seq_rule_set_count <- u16be,
    chained_class_seq_rule_sets <- array16 chained_class_seq_rule_set_count (offset16 table_start chained_class_sequence_rule_set),
};
def chained_sequence_context_format_3 : Format = {
    table_start <- stream_pos,
    backtrack_glyph_count <- u16be,
    backtrack_coverages <- array16 backtrack_glyph_count (offset16 table_start coverage_table),
    input_glyph_count <- u16be,
    input_coverage_tables <- array16 input_glyph_count (offset16 table_start coverage_table),
    lookahead_glyph_count <- u16be,
    lookahead_coverages <- array16 lookahead_glyph_count (offset16 table_start coverage_table),
    seq_lookup_count <- u16be,
    seq_lookup_records <- array16 seq_lookup_count sequence_lookup_record,
};
'''
stderr = ''
