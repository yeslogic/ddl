let _ = Void : Type;

let _ = U8 : Type;
let _ = U16 : Type;
let _ = U32 : Type;
let _ = U64 : Type;
let _ = S8 : Type;
let _ = S16 : Type;
let _ = S32 : Type;
let _ = S64 : Type;
let _ = F32 : Type;
let _ = F64 : Type;
let _ = Array8 : U8 -> Type -> Type;
let _ = Array16 : U16 -> Type -> Type;
let _ = Array32 : U32 -> Type -> Type;
let _ = Array64 : U64 -> Type -> Type;
let _ = Pos : Type;
let _ = Ref : Type -> Type;

let _ = 1 : U8;
let _ = 1 : U16;
let _ = 1 : U32;
let _ = 1 : U64;
let _ = 1 : S8;
let _ = 1 : S16;
let _ = 1 : S32;
let _ = 1 : S64;
let _ = 1 : F32;
let _ = 1 : F64;

let _ = Format : Type;
let _ = succeed : fun (Elem : Type) -> Elem -> Format;
let _ = fail : Format;
let _ = u8 : Format;
let _ = u16be : Format;
let _ = u16le : Format;
let _ = u32be : Format;
let _ = u32le : Format;
let _ = u64be : Format;
let _ = u64le : Format;
let _ = s8 : Format;
let _ = s16be : Format;
let _ = s16le : Format;
let _ = s32be : Format;
let _ = s32le : Format;
let _ = s64be : Format;
let _ = s64le : Format;
let _ = f32be : Format;
let _ = f32le : Format;
let _ = f64be : Format;
let _ = f64le : Format;
let _ = array8 : U8 -> Format -> Format;
let _ = array16 : U16 -> Format -> Format;
let _ = array32 : U32 -> Format -> Format;
let _ = array64 : U64 -> Format -> Format;
let _ = stream_pos : Format;
let _ = deref : Pos -> Format -> Format;
let _ = link : Pos -> Format -> Format;
let _ = Repr : Format -> Type;

let _ = u8_add : U8 -> U8 -> U8;
let _ = u8_sub : U8 -> U8 -> U8;
let _ = u8_mul : U8 -> U8 -> U8;
let _ = u8_div : U8 -> U8 -> U8;
let _ = u8_not : U8 -> U8;
let _ = u8_shl : U8 -> U8 -> U8;
let _ = u8_shr : U8 -> U8 -> U8;
let _ = u8_and : U8 -> U8 -> U8;
let _ = u8_or : U8 -> U8 -> U8;
let _ = u8_xor : U8 -> U8 -> U8;

let _ = u16_add : U16 -> U16 -> U16;
let _ = u16_sub : U16 -> U16 -> U16;
let _ = u16_mul : U16 -> U16 -> U16;
let _ = u16_div : U16 -> U16 -> U16;
let _ = u16_not : U16 -> U16;
let _ = u16_shl : U16 -> U8 -> U16;
let _ = u16_shr : U16 -> U8 -> U16;
let _ = u16_and : U16 -> U16 -> U16;
let _ = u16_or : U16 -> U16 -> U16;
let _ = u16_xor : U16 -> U16 -> U16;

let _ = u32_add : U32 -> U32 -> U32;
let _ = u32_sub : U32 -> U32 -> U32;
let _ = u32_mul : U32 -> U32 -> U32;
let _ = u32_div : U32 -> U32 -> U32;
let _ = u32_not : U32 -> U32;
let _ = u32_shl : U32 -> U8 -> U32;
let _ = u32_shr : U32 -> U8 -> U32;
let _ = u32_and : U32 -> U32 -> U32;
let _ = u32_or : U32 -> U32 -> U32;
let _ = u32_xor : U32 -> U32 -> U32;

let _ = u64_add : U64 -> U64 -> U64;
let _ = u64_sub : U64 -> U64 -> U64;
let _ = u64_mul : U64 -> U64 -> U64;
let _ = u64_div : U64 -> U64 -> U64;
let _ = u64_not : U64 -> U64;
let _ = u64_shl : U64 -> U8 -> U64;
let _ = u64_shr : U64 -> U8 -> U64;
let _ = u64_and : U64 -> U64 -> U64;
let _ = u64_or : U64 -> U64 -> U64;
let _ = u64_xor : U64 -> U64 -> U64;

let _ = s8_neg : S8 -> S8;
let _ = s8_add : S8 -> S8 -> S8;
let _ = s8_sub : S8 -> S8 -> S8;
let _ = s8_mul : S8 -> S8 -> S8;
let _ = s8_div : S8 -> S8 -> S8;

let _ = s16_neg : S16 -> S16;
let _ = s16_add : S16 -> S16 -> S16;
let _ = s16_sub : S16 -> S16 -> S16;
let _ = s16_mul : S16 -> S16 -> S16;
let _ = s16_div : S16 -> S16 -> S16;

let _ = s32_neg : S32 -> S32;
let _ = s32_add : S32 -> S32 -> S32;
let _ = s32_sub : S32 -> S32 -> S32;
let _ = s32_mul : S32 -> S32 -> S32;
let _ = s32_div : S32 -> S32 -> S32;

let _ = s64_neg : S64 -> S64;
let _ = s64_add : S64 -> S64 -> S64;
let _ = s64_sub : S64 -> S64 -> S64;
let _ = s64_mul : S64 -> S64 -> S64;
let _ = s64_div : S64 -> S64 -> S64;

let _ = pos_add_u8 : Pos -> U8 -> Pos;
let _ = pos_add_u16 : Pos -> U16 -> Pos;
let _ = pos_add_u32 : Pos -> U32 -> Pos;
let _ = pos_add_u64 : Pos -> U64 -> Pos;

Type
