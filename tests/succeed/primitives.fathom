let _ = Void : Type;

let _ = Bool : Type;

let _ = U8 : Type;
let _ = U16 : Type;
let _ = U32 : Type;
let _ = U64 : Type;
let _ = S8 : Type;
let _ = S16 : Type;
let _ = S32 : Type;
let _ = S64 : Type;
let _ = F32 : Type;
let _ = F64 : Type;
let _ = Option : Type -> Type;
let _ = Array : Type -> Type;
let _ = Array64 : U64 -> Type -> Type;
let _ = Pos : Type;
let _ = Ref : Format -> Type;

let _ = 1 : U8;
let _ = 1 : U16;
let _ = 1 : U32;
let _ = 1 : U64;
let _ = 1 : S8;
let _ = 1 : S16;
let _ = 1 : S32;
let _ = 1 : S64;
let _ = 1 : F32;
let _ = 1 : F64;

let _ = Format : Type;
let _ = u8 : Format;
let _ = u16be : Format;
let _ = u16le : Format;
let _ = u32be : Format;
let _ = u32le : Format;
let _ = u64be : Format;
let _ = u64le : Format;
let _ = s8 : Format;
let _ = s16be : Format;
let _ = s16le : Format;
let _ = s32be : Format;
let _ = s32le : Format;
let _ = s64be : Format;
let _ = s64le : Format;
let _ = f32be : Format;
let _ = f32le : Format;
let _ = f64be : Format;
let _ = f64le : Format;
let _ = repeat_len64 : U64 -> Format -> Format;
let _ = repeat_until_end : Format -> Format;
let _ = repeat_len64 : U64 -> Format -> Format;
let _ = link : Pos -> Format -> Format;
let _ = deref : fun (@f : Format) -> Ref f -> Format;
let _ = stream_pos : Format;
let _ = succeed : fun (@A : Type) -> A -> Format;
let _ = fail : Format;
let _ = unwrap : fun (@A : Type) -> Option A -> Format;
let _ = Repr : Format -> Type;

let _ = absurd : fun (@A : Type) -> Void -> A;

let _ = bool_eq : Bool -> Bool -> Bool;
let _ = bool_neq : Bool -> Bool -> Bool;
let _ = bool_not : Bool -> Bool;
let _ = bool_and : Bool -> Bool -> Bool;
let _ = bool_or : Bool -> Bool -> Bool;
let _ = bool_xor : Bool -> Bool -> Bool;

let _ = u8_eq : U8 -> U8 -> Bool;
let _ = u8_neq : U8 -> U8 -> Bool;
let _ = u8_gt : U8 -> U8 -> Bool;
let _ = u8_lt : U8 -> U8 -> Bool;
let _ = u8_gte : U8 -> U8 -> Bool;
let _ = u8_lte : U8 -> U8 -> Bool;
let _ = u8_add : U8 -> U8 -> U8;
let _ = u8_sub : U8 -> U8 -> U8;
let _ = u8_mul : U8 -> U8 -> U8;
let _ = u8_div : U8 -> U8 -> U8;
let _ = u8_not : U8 -> U8;
let _ = u8_shl : U8 -> U8 -> U8;
let _ = u8_shr : U8 -> U8 -> U8;
let _ = u8_and : U8 -> U8 -> U8;
let _ = u8_or : U8 -> U8 -> U8;
let _ = u8_xor : U8 -> U8 -> U8;
let _ = u8_extend_u16 : U8 -> U16;
let _ = u8_extend_u32 : U8 -> U32;
let _ = u8_extend_u64 : U8 -> U64;

let _ = u16_eq : U16 -> U16 -> Bool;
let _ = u16_neq : U16 -> U16 -> Bool;
let _ = u16_gt : U16 -> U16 -> Bool;
let _ = u16_lt : U16 -> U16 -> Bool;
let _ = u16_gte : U16 -> U16 -> Bool;
let _ = u16_lte : U16 -> U16 -> Bool;
let _ = u16_add : U16 -> U16 -> U16;
let _ = u16_sub : U16 -> U16 -> U16;
let _ = u16_mul : U16 -> U16 -> U16;
let _ = u16_div : U16 -> U16 -> U16;
let _ = u16_not : U16 -> U16;
let _ = u16_shl : U16 -> U8 -> U16;
let _ = u16_shr : U16 -> U8 -> U16;
let _ = u16_and : U16 -> U16 -> U16;
let _ = u16_or : U16 -> U16 -> U16;
let _ = u16_xor : U16 -> U16 -> U16;
let _ = u16_truncate_u8 : U16 -> U8;
let _ = u16_extend_u32 : U16 -> U32;
let _ = u16_extend_u64 : U16 -> U64;

let _ = u32_eq : U32 -> U32 -> Bool;
let _ = u32_neq : U32 -> U32 -> Bool;
let _ = u32_gt : U32 -> U32 -> Bool;
let _ = u32_lt : U32 -> U32 -> Bool;
let _ = u32_gte : U32 -> U32 -> Bool;
let _ = u32_lte : U32 -> U32 -> Bool;
let _ = u32_add : U32 -> U32 -> U32;
let _ = u32_sub : U32 -> U32 -> U32;
let _ = u32_mul : U32 -> U32 -> U32;
let _ = u32_div : U32 -> U32 -> U32;
let _ = u32_not : U32 -> U32;
let _ = u32_shl : U32 -> U8 -> U32;
let _ = u32_shr : U32 -> U8 -> U32;
let _ = u32_and : U32 -> U32 -> U32;
let _ = u32_or : U32 -> U32 -> U32;
let _ = u32_xor : U32 -> U32 -> U32;
let _ = u32_truncate_u8 : U32 -> U8;
let _ = u32_truncate_u16 : U32 -> U16;
let _ = u32_extend_u64 : U32 -> U64;

let _ = u64_eq : U64 -> U64 -> Bool;
let _ = u64_neq : U64 -> U64 -> Bool;
let _ = u64_gt : U64 -> U64 -> Bool;
let _ = u64_lt : U64 -> U64 -> Bool;
let _ = u64_gte : U64 -> U64 -> Bool;
let _ = u64_lte : U64 -> U64 -> Bool;
let _ = u64_add : U64 -> U64 -> U64;
let _ = u64_sub : U64 -> U64 -> U64;
let _ = u64_mul : U64 -> U64 -> U64;
let _ = u64_div : U64 -> U64 -> U64;
let _ = u64_not : U64 -> U64;
let _ = u64_shl : U64 -> U8 -> U64;
let _ = u64_shr : U64 -> U8 -> U64;
let _ = u64_and : U64 -> U64 -> U64;
let _ = u64_or : U64 -> U64 -> U64;
let _ = u64_xor : U64 -> U64 -> U64;
let _ = u64_truncate_u8 : U64 -> U8;
let _ = u64_truncate_u16 : U64 -> U16;
let _ = u64_truncate_u32 : U64 -> U32;

let _ = s8_eq : S8 -> S8 -> Bool;
let _ = s8_neq : S8 -> S8 -> Bool;
let _ = s8_gt : S8 -> S8 -> Bool;
let _ = s8_lt : S8 -> S8 -> Bool;
let _ = s8_gte : S8 -> S8 -> Bool;
let _ = s8_lte : S8 -> S8 -> Bool;
let _ = s8_neg : S8 -> S8;
let _ = s8_add : S8 -> S8 -> S8;
let _ = s8_sub : S8 -> S8 -> S8;
let _ = s8_mul : S8 -> S8 -> S8;
let _ = s8_div : S8 -> S8 -> S8;
let _ = s8_abs : S8 -> S8;
let _ = s8_unsigned_abs : S8 -> U8;
let _ = s8_extend_s16 : S8 -> S16;
let _ = s8_extend_s32 : S8 -> S32;
let _ = s8_extend_s64 : S8 -> S64;

let _ = s16_eq : S16 -> S16 -> Bool;
let _ = s16_neq : S16 -> S16 -> Bool;
let _ = s16_gt : S16 -> S16 -> Bool;
let _ = s16_lt : S16 -> S16 -> Bool;
let _ = s16_gte : S16 -> S16 -> Bool;
let _ = s16_lte : S16 -> S16 -> Bool;
let _ = s16_neg : S16 -> S16;
let _ = s16_add : S16 -> S16 -> S16;
let _ = s16_sub : S16 -> S16 -> S16;
let _ = s16_mul : S16 -> S16 -> S16;
let _ = s16_div : S16 -> S16 -> S16;
let _ = s16_abs : S16 -> S16;
let _ = s16_unsigned_abs : S16 -> U16;
let _ = s16_truncate_s8 : S16 -> S8;
let _ = s16_extend_s32 : S16 -> S32;
let _ = s16_extend_s64 : S16 -> S64;

let _ = s32_eq : S32 -> S32 -> Bool;
let _ = s32_neq : S32 -> S32 -> Bool;
let _ = s32_gt : S32 -> S32 -> Bool;
let _ = s32_lt : S32 -> S32 -> Bool;
let _ = s32_gte : S32 -> S32 -> Bool;
let _ = s32_lte : S32 -> S32 -> Bool;
let _ = s32_neg : S32 -> S32;
let _ = s32_add : S32 -> S32 -> S32;
let _ = s32_sub : S32 -> S32 -> S32;
let _ = s32_mul : S32 -> S32 -> S32;
let _ = s32_div : S32 -> S32 -> S32;
let _ = s32_abs : S32 -> S32;
let _ = s32_unsigned_abs : S32 -> U32;
let _ = s32_truncate_s8 : S32 -> S8;
let _ = s32_truncate_s16 : S32 -> S16;
let _ = s32_extend_s64 : S32 -> S64;

let _ = s64_eq : S64 -> S64 -> Bool;
let _ = s64_neq : S64 -> S64 -> Bool;
let _ = s64_gt : S64 -> S64 -> Bool;
let _ = s64_lt : S64 -> S64 -> Bool;
let _ = s64_gte : S64 -> S64 -> Bool;
let _ = s64_lte : S64 -> S64 -> Bool;
let _ = s64_neg : S64 -> S64;
let _ = s64_add : S64 -> S64 -> S64;
let _ = s64_sub : S64 -> S64 -> S64;
let _ = s64_mul : S64 -> S64 -> S64;
let _ = s64_div : S64 -> S64 -> S64;
let _ = s64_abs : S64 -> S64;
let _ = s64_unsigned_abs : S64 -> U64;
let _ = s64_truncate_s8 : S64 -> S8;
let _ = s64_truncate_s16 : S64 -> S16;
let _ = s64_truncate_s32 : S64 -> S32;

let _ = some : fun (@A : Type) -> A -> Option A;
let _ = none : fun (@A : Type) -> Option A;
let _ = option_fold : fun (@A : Type) (@B : Type) -> B -> (A -> B) -> Option A -> B;

let _ = array64_find : fun (@len : U64) (@A : Type) -> (A -> Bool) -> Array64 len A -> Option A;

let _ = array64_index : fun (@len : U64) (@A : Type) -> U64 -> Array64 len A -> A;

let _ = pos_add_u8 : Pos -> U8 -> Pos;
let _ = pos_add_u16 : Pos -> U16 -> Pos;
let _ = pos_add_u32 : Pos -> U32 -> Pos;
let _ = pos_add_u64 : Pos -> U64 -> Pos;

Type
