// Combinators

let id : fun (A : _) -> A -> A
  = fun _ => fun a => a;

let always : fun (A : _) -> fun (B : _) -> A -> B -> A
  = fun _ => fun _ => fun a => fun _ => a;

let compose : fun (A : _) -> fun (B : _) -> fun (C : _) -> (A -> B) -> (B -> C) -> (A -> C)
  = fun _ => fun _ => fun _ => fun ab => fun bc =>
      fun a => bc (ab a);


// Natural numbers

let Nat : Type
  = fun (Nat : _) ->
      fun (succ : Nat -> Nat) ->
      fun (zero : Nat) ->
        Nat;

let zero : Nat
    = fun Nat => fun succ => fun zero => zero;

let succ : Nat -> Nat
    = fun prev => fun Nat => fun succ => fun zero =>
        succ (prev _ succ zero);


let add : Nat -> Nat -> Nat
  = fun n0 => fun n1 => fun Nat => fun succ => fun zero =>
      n0 Nat succ (n1 Nat succ zero);

let mul : Nat -> Nat -> Nat
  = fun n0 => fun n1 =>
      fun Nat => fun succ => fun zero =>
        n0 Nat (n1 Nat succ) zero;


// Lists

let List : Type -> Type
  = fun Elem =>
      fun (List : _) ->
      fun (nil : List) ->
      fun (cons : Elem -> List -> List) ->
        List;

let nil : fun (Elem : _) -> List Elem
  = fun Elem =>
      fun List => fun nil => fun cons => nil;

let cons : fun (Elem : _) -> Elem -> List Elem -> List Elem
  = fun Elem => fun head => fun tail =>
      fun List => fun nil => fun cons =>
        cons head (tail _ nil cons);


// Vectors

let Vec : Type -> Nat -> Type
  = fun Elem => fun len =>
      fun (Vec : Nat -> Type) ->
      fun (nil : Vec zero) ->
      fun (cons : fun (len : _) -> Elem -> Vec len -> Vec (succ len)) ->
        Vec len;

let vnil : fun (Elem : _) -> Vec Elem zero
  = fun Elem =>
      fun Vec => fun nil => fun cons => nil;

let vcons : fun (Elem : _) -> fun (len : _) -> Elem -> Vec Elem len -> Vec Elem (succ len)
  = fun Elem => fun len => fun head => fun tail =>
      fun Vec => fun nil => fun cons =>
        cons _ head (tail Vec nil cons);


// Void

let Void : Type
  = fun (Void : Type) -> Void;

let absurd : fun (A : Type) -> Void -> A
  = fun A => fun void => void A;


// Unit

let Unit : Type
  = fun (Unit : Type) ->
      fun (unit : Unit) ->
        Unit;

let unit : Unit
  = fun Unit => fun unit => unit;


// Leibniz equality

// This states that two things of the same type are equal if every property of
// one is also a property of the other.
let Eq : fun (A : _) -> A -> A -> Type
  = fun A => fun a0 => fun a1 =>
      fun (P : A -> Type) -> P a0 -> P a1;

let refl : fun (A : _) -> fun (a : A) -> Eq A a a
  = fun A => fun a => fun P => id (P a);


let trans : fun (A : _) -> fun (a0 : A) -> fun (a1 : A) -> fun (a2 : A) ->
    Eq _ a0 a1 -> Eq _ a1 a2 -> Eq _ a0 a2
  = fun _ => fun a0 => fun a1 => fun a2 => fun p0 => fun p1 =>
      fun P => compose _ _ _ (p0 P) (p1 P);

let sym : fun (A : _) -> fun (a0 : A) -> fun (a1 : A) -> Eq _ a0 a1 -> Eq _ a1 a0
  = fun _ => fun a0 => fun a1 => fun p =>
      p (fun a1 => Eq _ a1 a0) (refl _ _);


// Examples

let id_apply_type = (fun a => a) Type;

let list1 : List Bool
  = cons _ (id _ true) (nil _);

let five : Nat = succ (succ (succ (succ (succ zero))));
let ten : Nat = add five five;
let hundred : Nat = mul ten ten;
let thousand : Nat = mul ten hundred;

let eq_test : Eq _ hundred hundred = refl _ _;

let eq_id_apply_type : Eq _ ((fun a => a) Type) Type = refl _ _;
let eq_id_apply_true : Eq _ ((fun a => a) true) true = refl _ _;
let eq_id_apply_false : Eq _ ((fun a => a) false) false = refl _ _;


Type
