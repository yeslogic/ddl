stdout = '''
let _ : Type = Void;
let _ : Type = Bool;
let _ : Type = U8;
let _ : Type = U16;
let _ : Type = U32;
let _ : Type = U64;
let _ : Type = S8;
let _ : Type = S16;
let _ : Type = S32;
let _ : Type = S64;
let _ : Type = F32;
let _ : Type = F64;
let _ : Type -> Type = Option;
let _ : Type -> Type = Array;
let _ : U64 -> Type -> Type = Array64;
let _ : Type = Pos;
let _ : Format -> Type = Ref;
let _ : U8 = 1;
let _ : U16 = 1;
let _ : U32 = 1;
let _ : U64 = 1;
let _ : S8 = 1;
let _ : S16 = 1;
let _ : S32 = 1;
let _ : S64 = 1;
let _ : F32 = 1;
let _ : F64 = 1;
let _ : Type = Format;
let _ : Format = u8;
let _ : Format = u16be;
let _ : Format = u16le;
let _ : Format = u32be;
let _ : Format = u32le;
let _ : Format = u64be;
let _ : Format = u64le;
let _ : Format = s8;
let _ : Format = s16be;
let _ : Format = s16le;
let _ : Format = s32be;
let _ : Format = s32le;
let _ : Format = s64be;
let _ : Format = s64le;
let _ : Format = f32be;
let _ : Format = f32le;
let _ : Format = f64be;
let _ : Format = f64le;
let _ : U64 -> Format -> Format = repeat_len64;
let _ : Format -> Format = repeat_until_end;
let _ : U64 -> Format -> Format = repeat_len64;
let _ : Pos -> Format -> Format = link;
let _ : fun (@f : Format) -> Ref f -> Format = deref;
let _ : Format = stream_pos;
let _ : fun (@A : Type) -> A -> Format = succeed;
let _ : Format = fail;
let _ : fun (@A : Type) -> Option A -> Format = unwrap;
let _ : Format -> Type = Repr;
let _ : fun (@A : Type) -> Void -> A = absurd;
let _ : Bool -> Bool -> Bool = bool_eq;
let _ : Bool -> Bool -> Bool = bool_neq;
let _ : Bool -> Bool = bool_not;
let _ : Bool -> Bool -> Bool = bool_and;
let _ : Bool -> Bool -> Bool = bool_or;
let _ : Bool -> Bool -> Bool = bool_xor;
let _ : U8 -> U8 -> Bool = u8_eq;
let _ : U8 -> U8 -> Bool = u8_neq;
let _ : U8 -> U8 -> Bool = u8_gt;
let _ : U8 -> U8 -> Bool = u8_lt;
let _ : U8 -> U8 -> Bool = u8_gte;
let _ : U8 -> U8 -> Bool = u8_lte;
let _ : U8 -> U8 -> U8 = u8_add;
let _ : U8 -> U8 -> U8 = u8_sub;
let _ : U8 -> U8 -> U8 = u8_mul;
let _ : U8 -> U8 -> U8 = u8_div;
let _ : U8 -> U8 = u8_not;
let _ : U8 -> U8 -> U8 = u8_shl;
let _ : U8 -> U8 -> U8 = u8_shr;
let _ : U8 -> U8 -> U8 = u8_and;
let _ : U8 -> U8 -> U8 = u8_or;
let _ : U8 -> U8 -> U8 = u8_xor;
let _ : U8 -> U16 = u8_extend_u16;
let _ : U8 -> U32 = u8_extend_u32;
let _ : U8 -> U64 = u8_extend_u64;
let _ : U16 -> U16 -> Bool = u16_eq;
let _ : U16 -> U16 -> Bool = u16_neq;
let _ : U16 -> U16 -> Bool = u16_gt;
let _ : U16 -> U16 -> Bool = u16_lt;
let _ : U16 -> U16 -> Bool = u16_gte;
let _ : U16 -> U16 -> Bool = u16_lte;
let _ : U16 -> U16 -> U16 = u16_add;
let _ : U16 -> U16 -> U16 = u16_sub;
let _ : U16 -> U16 -> U16 = u16_mul;
let _ : U16 -> U16 -> U16 = u16_div;
let _ : U16 -> U16 = u16_not;
let _ : U16 -> U8 -> U16 = u16_shl;
let _ : U16 -> U8 -> U16 = u16_shr;
let _ : U16 -> U16 -> U16 = u16_and;
let _ : U16 -> U16 -> U16 = u16_or;
let _ : U16 -> U16 -> U16 = u16_xor;
let _ : U16 -> U8 = u16_truncate_u8;
let _ : U16 -> U32 = u16_extend_u32;
let _ : U16 -> U64 = u16_extend_u64;
let _ : U32 -> U32 -> Bool = u32_eq;
let _ : U32 -> U32 -> Bool = u32_neq;
let _ : U32 -> U32 -> Bool = u32_gt;
let _ : U32 -> U32 -> Bool = u32_lt;
let _ : U32 -> U32 -> Bool = u32_gte;
let _ : U32 -> U32 -> Bool = u32_lte;
let _ : U32 -> U32 -> U32 = u32_add;
let _ : U32 -> U32 -> U32 = u32_sub;
let _ : U32 -> U32 -> U32 = u32_mul;
let _ : U32 -> U32 -> U32 = u32_div;
let _ : U32 -> U32 = u32_not;
let _ : U32 -> U8 -> U32 = u32_shl;
let _ : U32 -> U8 -> U32 = u32_shr;
let _ : U32 -> U32 -> U32 = u32_and;
let _ : U32 -> U32 -> U32 = u32_or;
let _ : U32 -> U32 -> U32 = u32_xor;
let _ : U32 -> U8 = u32_truncate_u8;
let _ : U32 -> U16 = u32_truncate_u16;
let _ : U32 -> U64 = u32_extend_u64;
let _ : U64 -> U64 -> Bool = u64_eq;
let _ : U64 -> U64 -> Bool = u64_neq;
let _ : U64 -> U64 -> Bool = u64_gt;
let _ : U64 -> U64 -> Bool = u64_lt;
let _ : U64 -> U64 -> Bool = u64_gte;
let _ : U64 -> U64 -> Bool = u64_lte;
let _ : U64 -> U64 -> U64 = u64_add;
let _ : U64 -> U64 -> U64 = u64_sub;
let _ : U64 -> U64 -> U64 = u64_mul;
let _ : U64 -> U64 -> U64 = u64_div;
let _ : U64 -> U64 = u64_not;
let _ : U64 -> U8 -> U64 = u64_shl;
let _ : U64 -> U8 -> U64 = u64_shr;
let _ : U64 -> U64 -> U64 = u64_and;
let _ : U64 -> U64 -> U64 = u64_or;
let _ : U64 -> U64 -> U64 = u64_xor;
let _ : U64 -> U8 = u64_truncate_u8;
let _ : U64 -> U16 = u64_truncate_u16;
let _ : U64 -> U32 = u64_truncate_u32;
let _ : S8 -> S8 -> Bool = s8_eq;
let _ : S8 -> S8 -> Bool = s8_neq;
let _ : S8 -> S8 -> Bool = s8_gt;
let _ : S8 -> S8 -> Bool = s8_lt;
let _ : S8 -> S8 -> Bool = s8_gte;
let _ : S8 -> S8 -> Bool = s8_lte;
let _ : S8 -> S8 = s8_neg;
let _ : S8 -> S8 -> S8 = s8_add;
let _ : S8 -> S8 -> S8 = s8_sub;
let _ : S8 -> S8 -> S8 = s8_mul;
let _ : S8 -> S8 -> S8 = s8_div;
let _ : S8 -> S8 = s8_abs;
let _ : S8 -> U8 = s8_unsigned_abs;
let _ : S8 -> S16 = s8_extend_s16;
let _ : S8 -> S32 = s8_extend_s32;
let _ : S8 -> S64 = s8_extend_s64;
let _ : S16 -> S16 -> Bool = s16_eq;
let _ : S16 -> S16 -> Bool = s16_neq;
let _ : S16 -> S16 -> Bool = s16_gt;
let _ : S16 -> S16 -> Bool = s16_lt;
let _ : S16 -> S16 -> Bool = s16_gte;
let _ : S16 -> S16 -> Bool = s16_lte;
let _ : S16 -> S16 = s16_neg;
let _ : S16 -> S16 -> S16 = s16_add;
let _ : S16 -> S16 -> S16 = s16_sub;
let _ : S16 -> S16 -> S16 = s16_mul;
let _ : S16 -> S16 -> S16 = s16_div;
let _ : S16 -> S16 = s16_abs;
let _ : S16 -> U16 = s16_unsigned_abs;
let _ : S16 -> S8 = s16_truncate_s8;
let _ : S16 -> S32 = s16_extend_s32;
let _ : S16 -> S64 = s16_extend_s64;
let _ : S32 -> S32 -> Bool = s32_eq;
let _ : S32 -> S32 -> Bool = s32_neq;
let _ : S32 -> S32 -> Bool = s32_gt;
let _ : S32 -> S32 -> Bool = s32_lt;
let _ : S32 -> S32 -> Bool = s32_gte;
let _ : S32 -> S32 -> Bool = s32_lte;
let _ : S32 -> S32 = s32_neg;
let _ : S32 -> S32 -> S32 = s32_add;
let _ : S32 -> S32 -> S32 = s32_sub;
let _ : S32 -> S32 -> S32 = s32_mul;
let _ : S32 -> S32 -> S32 = s32_div;
let _ : S32 -> S32 = s32_abs;
let _ : S32 -> U32 = s32_unsigned_abs;
let _ : S32 -> S8 = s32_truncate_s8;
let _ : S32 -> S16 = s32_truncate_s16;
let _ : S32 -> S64 = s32_extend_s64;
let _ : S64 -> S64 -> Bool = s64_eq;
let _ : S64 -> S64 -> Bool = s64_neq;
let _ : S64 -> S64 -> Bool = s64_gt;
let _ : S64 -> S64 -> Bool = s64_lt;
let _ : S64 -> S64 -> Bool = s64_gte;
let _ : S64 -> S64 -> Bool = s64_lte;
let _ : S64 -> S64 = s64_neg;
let _ : S64 -> S64 -> S64 = s64_add;
let _ : S64 -> S64 -> S64 = s64_sub;
let _ : S64 -> S64 -> S64 = s64_mul;
let _ : S64 -> S64 -> S64 = s64_div;
let _ : S64 -> S64 = s64_abs;
let _ : S64 -> U64 = s64_unsigned_abs;
let _ : S64 -> S8 = s64_truncate_s8;
let _ : S64 -> S16 = s64_truncate_s16;
let _ : S64 -> S32 = s64_truncate_s32;
let _ : fun (@A : Type) -> A -> Option A = some;
let _ : fun (@A : Type) -> Option A = none;
let _ : fun (@A : Type) (@B : Type) -> B -> (A -> B) -> Option A -> B =
option_fold;
let _ : fun (@len : U64) (@A : Type) -> (A -> Bool) -> Array64 len A ->
Option A = array64_find;
let _ : fun (@len : U64) (@A : Type) -> U64 -> Array64 len A -> A =
array64_index;
let _ : Pos -> U8 -> Pos = pos_add_u8;
let _ : Pos -> U16 -> Pos = pos_add_u16;
let _ : Pos -> U32 -> Pos = pos_add_u32;
let _ : Pos -> U64 -> Pos = pos_add_u64;
Type : Type
'''
stderr = ''
