stdout = '''
let _ = Void;
let _ = Bool;
let _ = U8;
let _ = U16;
let _ = U32;
let _ = U64;
let _ = S8;
let _ = S16;
let _ = S32;
let _ = S64;
let _ = F32;
let _ = F64;
let _ = Option;
let _ = Array;
let _ = Array8;
let _ = Array16;
let _ = Array32;
let _ = Array64;
let _ = Pos;
let _ = Ref;
let _ = 1;
let _ = 1;
let _ = 1;
let _ = 1;
let _ = 1;
let _ = 1;
let _ = 1;
let _ = 1;
let _ = 1;
let _ = 1;
let _ = Format;
let _ = u8;
let _ = u16be;
let _ = u16le;
let _ = u32be;
let _ = u32le;
let _ = u64be;
let _ = u64le;
let _ = s8;
let _ = s16be;
let _ = s16le;
let _ = s32be;
let _ = s32le;
let _ = s64be;
let _ = s64le;
let _ = f32be;
let _ = f32le;
let _ = f64be;
let _ = f64le;
let _ = repeat_len8;
let _ = repeat_len16;
let _ = repeat_len32;
let _ = repeat_len64;
let _ = repeat_until_end;
let _ = repeat_len8;
let _ = repeat_len16;
let _ = repeat_len32;
let _ = repeat_len64;
let _ = link;
let _ = deref;
let _ = stream_pos;
let _ = succeed;
let _ = fail;
let _ = unwrap;
let _ = Repr;
let _ = absurd;
let _ = bool_eq;
let _ = bool_neq;
let _ = bool_not;
let _ = bool_and;
let _ = bool_or;
let _ = bool_xor;
let _ = u8_eq;
let _ = u8_neq;
let _ = u8_gt;
let _ = u8_lt;
let _ = u8_gte;
let _ = u8_lte;
let _ = u8_add;
let _ = u8_sub;
let _ = u8_mul;
let _ = u8_div;
let _ = u8_not;
let _ = u8_shl;
let _ = u8_shr;
let _ = u8_and;
let _ = u8_or;
let _ = u8_xor;
let _ = u16_eq;
let _ = u16_neq;
let _ = u16_gt;
let _ = u16_lt;
let _ = u16_gte;
let _ = u16_lte;
let _ = u16_add;
let _ = u16_sub;
let _ = u16_mul;
let _ = u16_div;
let _ = u16_not;
let _ = u16_shl;
let _ = u16_shr;
let _ = u16_and;
let _ = u16_or;
let _ = u16_xor;
let _ = u32_eq;
let _ = u32_neq;
let _ = u32_gt;
let _ = u32_lt;
let _ = u32_gte;
let _ = u32_lte;
let _ = u32_add;
let _ = u32_sub;
let _ = u32_mul;
let _ = u32_div;
let _ = u32_not;
let _ = u32_shl;
let _ = u32_shr;
let _ = u32_and;
let _ = u32_or;
let _ = u32_xor;
let _ = u64_eq;
let _ = u64_neq;
let _ = u64_gt;
let _ = u64_lt;
let _ = u64_gte;
let _ = u64_lte;
let _ = u64_add;
let _ = u64_sub;
let _ = u64_mul;
let _ = u64_div;
let _ = u64_not;
let _ = u64_shl;
let _ = u64_shr;
let _ = u64_and;
let _ = u64_or;
let _ = u64_xor;
let _ = s8_eq;
let _ = s8_neq;
let _ = s8_gt;
let _ = s8_lt;
let _ = s8_gte;
let _ = s8_lte;
let _ = s8_neg;
let _ = s8_add;
let _ = s8_sub;
let _ = s8_mul;
let _ = s8_div;
let _ = s8_abs;
let _ = s8_unsigned_abs;
let _ = s16_eq;
let _ = s16_neq;
let _ = s16_gt;
let _ = s16_lt;
let _ = s16_gte;
let _ = s16_lte;
let _ = s16_neg;
let _ = s16_add;
let _ = s16_sub;
let _ = s16_mul;
let _ = s16_div;
let _ = s16_abs;
let _ = s16_unsigned_abs;
let _ = s32_eq;
let _ = s32_neq;
let _ = s32_gt;
let _ = s32_lt;
let _ = s32_gte;
let _ = s32_lte;
let _ = s32_neg;
let _ = s32_add;
let _ = s32_sub;
let _ = s32_mul;
let _ = s32_div;
let _ = s32_abs;
let _ = s32_unsigned_abs;
let _ = s64_eq;
let _ = s64_neq;
let _ = s64_gt;
let _ = s64_lt;
let _ = s64_gte;
let _ = s64_lte;
let _ = s64_neg;
let _ = s64_add;
let _ = s64_sub;
let _ = s64_mul;
let _ = s64_div;
let _ = s64_abs;
let _ = s64_unsigned_abs;
let _ = some;
let _ = none;
let _ = option_fold;
let _ = array8_find;
let _ = array16_find;
let _ = array32_find;
let _ = array64_find;
let _ = array8_index;
let _ = array16_index;
let _ = array32_index;
let _ = array64_index;
let _ = pos_add_u8;
let _ = pos_add_u16;
let _ = pos_add_u32;
let _ = pos_add_u64;
Type : Type
'''
stderr = ''
