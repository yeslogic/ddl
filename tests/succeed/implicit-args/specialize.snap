stdout = '''
let id : fun (@A : Type) -> A -> A = fun @A a => a;
let always : fun (@A : Type) (@B : Type) -> A -> B -> A = fun @A @B a b => a;
let apply : fun (@A : Type) (@B : Type) -> (A -> B) -> A -> B = 
fun @A @B f x => f x;
let _ : fun (@A : Type) -> A -> A = id;
let _ : fun (@A : Type) (@B : Type) -> A -> B -> A = always;
let _ : fun (@A : Type) (@B : Type) -> (A -> B) -> A -> B = apply;
let _ : Bool -> Bool = id @Bool;
let _ : Bool -> U32 -> Bool = always @Bool @U32;
let _ : (Bool -> U32) -> Bool -> U32 = apply @Bool @U32;
let _ : Bool = apply @U32 @Bool (always @Bool @U32 false) 0;
() : ()
'''
stderr = ''
