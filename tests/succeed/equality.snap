stdout = '''
let id = fun (A : Type) (a : A) => a;
let Eq = fun (A : Type) (a0 : A) (a1 : A) => fun (P : A -> Type) -> P a0 ->
P a1;
let refl = fun (A : Type) (a : A) (P : A -> Type) => id (P a);
let fun_eta_left = fun (f : Type -> Type) => refl (Type -> Type) f;
let fun_eta_right = fun (f : Type -> Type) => refl (Type -> Type) f;
let fun_eta_left = fun (f : Type -> Type -> Type) => refl (Type -> Type ->
Type) f;
let fun_eta_right = fun (f : Type -> Type -> Type) => refl (Type -> Type ->
Type) f;
let fun_eta_left = fun (f : Type -> Type -> Type) => refl (Type -> Type ->
Type) f;
let fun_eta_right = fun (f : Type -> Type -> Type) => refl (Type -> Type ->
Type) f;
let fun_eta_left = fun (f : Type -> Type -> Type) => refl (Type -> Type ->
Type) f;
let fun_eta_right = fun (f : Type -> Type -> Type) => refl (Type -> Type ->
Type) f;
let record_eta_left = fun (r : { x : Type, y : Type }) => refl {
    x : Type,
    y : Type,
} r;
let record_eta_right = fun (r : { x : Type, y : Type }) => refl {
    x : Type,
    y : Type,
} r;
let four_chars = refl U32 "beng";
let three_chars = refl U32 "BEN ";
let foo = fun (x : U32) => match x { 1 => 0, x => x };
let eq_foo = refl (U32 -> U32) (fun (a : reported_error) => match a {
    1 => 0,
    x => x,
});
Type : Type
'''
stderr = ''
