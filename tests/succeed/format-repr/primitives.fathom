let _ : Repr (succeed S32 42) -> S32 = fun x => x;
let _ : Repr fail -> Void = fun x => x;
let _ : Repr u8 -> U8 = fun x => x;
let _ : Repr u16be -> U16 = fun x => x;
let _ : Repr u16le -> U16 = fun x => x;
let _ : Repr u32be -> U32 = fun x => x;
let _ : Repr u32le -> U32 = fun x => x;
let _ : Repr u64be -> U64 = fun x => x;
let _ : Repr u64le -> U64 = fun x => x;
let _ : Repr s8 -> S8 = fun x => x;
let _ : Repr s16be -> S16 = fun x => x;
let _ : Repr s16le -> S16 = fun x => x;
let _ : Repr s32be -> S32 = fun x => x;
let _ : Repr s32le -> S32 = fun x => x;
let _ : Repr s64be -> S64 = fun x => x;
let _ : Repr s64le -> S64 = fun x => x;
let _ : Repr f32be -> F32 = fun x => x;
let _ : Repr f32le -> F32 = fun x => x;
let _ : Repr f64be -> F64 = fun x => x;
let _ : Repr f64le -> F64 = fun x => x;

let _ : fun n -> fun f -> Repr (array8 n f) -> Array8 n (Repr f) = fun _ => fun _ => fun x => x;
let _ : fun n -> fun f -> Repr (array16 n f) -> Array16 n (Repr f) = fun _ => fun _ => fun x => x;
let _ : fun n -> fun f -> Repr (array32 n f) -> Array32 n (Repr f) = fun _ => fun _ => fun x => x;
let _ : fun n -> fun f -> Repr (array64 n f) -> Array64 n (Repr f) = fun _ => fun _ => fun x => x;

let _ : Repr stream_pos -> Pos = fun x => x;
let _ : fun pos -> fun f -> Repr (deref pos f) -> Repr f = fun _ => fun _ => fun x => x;
let _ : fun pos -> fun f -> Repr (link pos f) -> Ref (Repr f) = fun _ => fun _ => fun x => x;

Type
