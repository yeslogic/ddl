stdout = '''
let test_u8_repr = fun (x : U8) => x;
let test_u16be_repr = fun (x : U16) => x;
let test_u16le_repr = fun (x : U16) => x;
let test_u32be_repr = fun (x : U32) => x;
let test_u32le_repr = fun (x : U32) => x;
let test_u64be_repr = fun (x : U64) => x;
let test_u64le_repr = fun (x : U64) => x;
let test_s8_repr = fun (x : S8) => x;
let test_s16be_repr = fun (x : S16) => x;
let test_s16le_repr = fun (x : S16) => x;
let test_s32be_repr = fun (x : S32) => x;
let test_s32le_repr = fun (x : S32) => x;
let test_s64be_repr = fun (x : S64) => x;
let test_s64le_repr = fun (x : S64) => x;
let test_f32be_repr = fun (x : F32) => x;
let test_f32le_repr = fun (x : F32) => x;
let test_f64be_repr = fun (x : F64) => x;
let test_f64le_repr = fun (x : F64) => x;
let test_repeat_len8 = fun (a : U8) (b : Format) (x : Array8 a (Repr b)) => x;
let test_repeat_len16 = fun (a : U16) (b : Format) (x :
Array16 a (Repr b)) => x;
let test_repeat_len32 = fun (a : U32) (b : Format) (x :
Array32 a (Repr b)) => x;
let test_repeat_len64 = fun (a : U64) (b : Format) (x :
Array64 a (Repr b)) => x;
let test_repeat_until_end = fun (a : Format) (x : Array (Repr a)) => x;
let test_limit8 = fun (_ : U8) (a : Format) (x : Repr a) => x;
let test_limit16 = fun (_ : U16) (a : Format) (x : Repr a) => x;
let test_limit32 = fun (_ : U32) (a : Format) (x : Repr a) => x;
let test_limit64 = fun (_ : U64) (a : Format) (x : Repr a) => x;
let test_link = fun (_ : Pos) (a : Format) (x : Ref a) => x;
let test_deref = fun (a : Format) (_ : Ref a) (x : Repr a) => x;
let test_stream_pos = fun (x : Pos) => x;
let test_succeed = fun (x : S32) => x;
let test_fail = fun (x : Void) => x;
let test_unwrap = fun (a : Type) (_ : Option a) (x : a) => x;
Type : Type
'''
stderr = ''
