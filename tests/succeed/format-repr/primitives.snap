stdout = '''
let _ : fun (_ : S32) -> S32 = fun x => x;
let _ : fun (_ : Void) -> Void = fun x => x;
let _ : fun (_ : U8) -> U8 = fun x => x;
let _ : fun (_ : U16) -> U16 = fun x => x;
let _ : fun (_ : U16) -> U16 = fun x => x;
let _ : fun (_ : U32) -> U32 = fun x => x;
let _ : fun (_ : U32) -> U32 = fun x => x;
let _ : fun (_ : U64) -> U64 = fun x => x;
let _ : fun (_ : U64) -> U64 = fun x => x;
let _ : fun (_ : S8) -> S8 = fun x => x;
let _ : fun (_ : S16) -> S16 = fun x => x;
let _ : fun (_ : S16) -> S16 = fun x => x;
let _ : fun (_ : S32) -> S32 = fun x => x;
let _ : fun (_ : S32) -> S32 = fun x => x;
let _ : fun (_ : S64) -> S64 = fun x => x;
let _ : fun (_ : S64) -> S64 = fun x => x;
let _ : fun (_ : F32) -> F32 = fun x => x;
let _ : fun (_ : F32) -> F32 = fun x => x;
let _ : fun (_ : F64) -> F64 = fun x => x;
let _ : fun (_ : F64) -> F64 = fun x => x;
let _ : fun (n : U8) -> fun (f : Format) -> fun (_ : Array8 n (Repr f)) ->
Array8 n (Repr f) = fun _ => fun _ => fun x => x;
let _ : fun (n : U16) -> fun (f : Format) -> fun (_ : Array16 n (Repr f)) ->
Array16 n (Repr f) = fun _ => fun _ => fun x => x;
let _ : fun (n : U32) -> fun (f : Format) -> fun (_ : Array32 n (Repr f)) ->
Array32 n (Repr f) = fun _ => fun _ => fun x => x;
let _ : fun (n : U64) -> fun (f : Format) -> fun (_ : Array64 n (Repr f)) ->
Array64 n (Repr f) = fun _ => fun _ => fun x => x;
let _ : fun (_ : Pos) -> Pos = fun x => x;
let _ : fun (pos : Pos) -> fun (f : Format) -> fun (_ : Repr f) -> Repr f =
fun _ => fun _ => fun x => x;
let _ : fun (pos : Pos) -> fun (f : Format) -> fun (_ : Ref (Repr f)) ->
Ref (Repr f) = fun _ => fun _ => fun x => x;
Type : Type
'''
stderr = ''
